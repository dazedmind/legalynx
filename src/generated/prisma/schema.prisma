generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================

model User {
  id                  String             @id @default(uuid())
  name                String?
  email               String             @unique
  password            String
  job_title           String?            @map("job_title")
  profile_picture     String?            @map("profile_picture")
  subscription_status SubscriptionStatus @default(BASIC) @map("subscription_status")
  two_factor_enabled  Boolean            @default(false) @map("two_factor_enabled")
  two_factor_secret   String?            @map("two_factor_secret")
  ai_personality      String?            @map("ai_personality") @db.Text
  status              UserStatus         @default(ACTIVE)
  email_verified      Boolean            @default(false) @map("email_verified")
  created_at          DateTime           @default(now()) @map("created_at")
  updated_at          DateTime           @updatedAt @map("updated_at")
  last_login_at       DateTime?          @map("last_login_at")

  documents           Document[]
  chat_sessions       ChatSession[]       @relation("UserChatSessions")
  security_logs       SecurityLog[]       @relation("UserSecurityLogs")
  accounts            Account[]
  sessions            Session[]
  verification_tokens VerificationToken[] @relation("UserVerificationTokens")

  @@map("users")
}

// ============================================
// DOCUMENT MANAGEMENT
// ============================================

model Document {
  id                 String         @id @default(uuid())
  file_name          String         @map("file_name")
  original_file_name String         @map("original_file_name")
  file_path          String         @map("file_path")
  file_size          Int            @map("file_size")
  mime_type          String         @map("mime_type")
  status             DocumentStatus @default(UPLOADED)
  is_scanned         Boolean?       @map("is_scanned")
  page_count         Int?           @map("page_count")
  owner_id           String         @map("owner_id")
  owner              User           @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  uploaded_at        DateTime       @default(now()) @map("uploaded_at")
  updated_at         DateTime       @updatedAt @map("updated_at")

  chat_sessions ChatSession[] @relation("DocumentChatSessions")

  @@map("documents")
}

// ============================================
// CHAT SYSTEM
// ============================================

model ChatSession {
  id          String   @id @default(uuid())
  title       String?
  user_id     String   @map("user_id")
  user        User     @relation("UserChatSessions", fields: [user_id], references: [id], onDelete: Cascade)
  document_id String   @map("document_id")
  document    Document @relation("DocumentChatSessions", fields: [document_id], references: [id], onDelete: Cascade)
  is_saved    Boolean  @default(false) @map("is_saved")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")

  messages ChatMessage[] @relation("SessionMessages")

  @@map("chat_sessions")
}

model ChatMessage {
  id           String      @id @default(uuid())
  session_id   String      @map("session_id")
  session      ChatSession @relation("SessionMessages", fields: [session_id], references: [id], onDelete: Cascade)
  role         MessageRole // USER or ASSISTANT
  content      String      @db.Text
  source_nodes Json?       @map("source_nodes") // Retrieved sources info
  tokens_used  Int?        @map("tokens_used")
  created_at   DateTime    @default(now()) @map("created_at")

  @@map("chat_messages")
}

// ============================================
// SECURITY & AUDIT
// ============================================

model SecurityLog {
  id         String         @id @default(uuid())
  user_id    String         @map("user_id")
  user       User           @relation("UserSecurityLogs", fields: [user_id], references: [id], onDelete: Cascade)
  action     SecurityAction
  details    String?
  ip_address String?        @map("ip_address")
  user_agent String?        @map("user_agent")
  created_at DateTime       @default(now()) @map("created_at")

  @@index([user_id, created_at])
  @@map("security_logs")
}

model VerificationToken {
  id         String    @id @default(uuid())
  email      String
  key        String
  token      String    @unique
  user_id    String?   @map("user_id")
  user       User?     @relation("UserVerificationTokens", fields: [user_id], references: [id], onDelete: Cascade)
  type       TokenType @default(EMAIL_VERIFICATION)
  expires_at DateTime  @map("expires_at")
  used       Boolean   @default(false)
  created_at DateTime  @default(now()) @map("created_at")

  @@map("verification_tokens")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id") // Map to snake_case
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts") // Use snake_case table name
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions") // Use snake_case table name
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionStatus {
  BASIC
  STANDARD
  PREMIUM
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  TEMPORARY
  INDEXED
  FAILED
}

enum MessageRole {
  USER
  ASSISTANT
}

enum SecurityAction {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  EMAIL_CHANGE
  PROFILE_UPDATE
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  TWO_FACTOR_LOGIN
  DOCUMENT_UPLOAD
  DOCUMENT_DELETE
  CHAT_SAVE
  CHAT_DELETE
}
