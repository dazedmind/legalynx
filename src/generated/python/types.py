# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _TokenTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.TokenType']]


class _TokenTypeListFilterHasInput(TypedDict):
    has: 'enums.TokenType'


class _TokenTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.TokenType']


class _TokenTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.TokenType']


class _TokenTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


TokenTypeListFilter = Union[
    _TokenTypeListFilterHasInput,
    _TokenTypeListFilterEqualsInput,
    _TokenTypeListFilterHasSomeInput,
    _TokenTypeListFilterIsEmptyInput,
    _TokenTypeListFilterHasEveryInput,
]


class _TokenTypeListUpdateSet(TypedDict):
    set: List['enums.TokenType']


class _TokenTypeListUpdatePush(TypedDict):
    push: List['enums.TokenType']


TokenTypeListUpdate = Union[
    List['enums.TokenType'],
    _TokenTypeListUpdateSet,
    _TokenTypeListUpdatePush,
]

class _UserStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserStatus']]


class _UserStatusListFilterHasInput(TypedDict):
    has: 'enums.UserStatus'


class _UserStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserStatus']


class _UserStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserStatus']


class _UserStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserStatusListFilter = Union[
    _UserStatusListFilterHasInput,
    _UserStatusListFilterEqualsInput,
    _UserStatusListFilterHasSomeInput,
    _UserStatusListFilterIsEmptyInput,
    _UserStatusListFilterHasEveryInput,
]


class _UserStatusListUpdateSet(TypedDict):
    set: List['enums.UserStatus']


class _UserStatusListUpdatePush(TypedDict):
    push: List['enums.UserStatus']


UserStatusListUpdate = Union[
    List['enums.UserStatus'],
    _UserStatusListUpdateSet,
    _UserStatusListUpdatePush,
]

class _SubscriptionStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.SubscriptionStatus']]


class _SubscriptionStatusListFilterHasInput(TypedDict):
    has: 'enums.SubscriptionStatus'


class _SubscriptionStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.SubscriptionStatus']


class _SubscriptionStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.SubscriptionStatus']


class _SubscriptionStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


SubscriptionStatusListFilter = Union[
    _SubscriptionStatusListFilterHasInput,
    _SubscriptionStatusListFilterEqualsInput,
    _SubscriptionStatusListFilterHasSomeInput,
    _SubscriptionStatusListFilterIsEmptyInput,
    _SubscriptionStatusListFilterHasEveryInput,
]


class _SubscriptionStatusListUpdateSet(TypedDict):
    set: List['enums.SubscriptionStatus']


class _SubscriptionStatusListUpdatePush(TypedDict):
    push: List['enums.SubscriptionStatus']


SubscriptionStatusListUpdate = Union[
    List['enums.SubscriptionStatus'],
    _SubscriptionStatusListUpdateSet,
    _SubscriptionStatusListUpdatePush,
]

class _DocumentStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.DocumentStatus']]


class _DocumentStatusListFilterHasInput(TypedDict):
    has: 'enums.DocumentStatus'


class _DocumentStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.DocumentStatus']


class _DocumentStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.DocumentStatus']


class _DocumentStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DocumentStatusListFilter = Union[
    _DocumentStatusListFilterHasInput,
    _DocumentStatusListFilterEqualsInput,
    _DocumentStatusListFilterHasSomeInput,
    _DocumentStatusListFilterIsEmptyInput,
    _DocumentStatusListFilterHasEveryInput,
]


class _DocumentStatusListUpdateSet(TypedDict):
    set: List['enums.DocumentStatus']


class _DocumentStatusListUpdatePush(TypedDict):
    push: List['enums.DocumentStatus']


DocumentStatusListUpdate = Union[
    List['enums.DocumentStatus'],
    _DocumentStatusListUpdateSet,
    _DocumentStatusListUpdatePush,
]

class _MessageRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.MessageRole']]


class _MessageRoleListFilterHasInput(TypedDict):
    has: 'enums.MessageRole'


class _MessageRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.MessageRole']


class _MessageRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.MessageRole']


class _MessageRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


MessageRoleListFilter = Union[
    _MessageRoleListFilterHasInput,
    _MessageRoleListFilterEqualsInput,
    _MessageRoleListFilterHasSomeInput,
    _MessageRoleListFilterIsEmptyInput,
    _MessageRoleListFilterHasEveryInput,
]


class _MessageRoleListUpdateSet(TypedDict):
    set: List['enums.MessageRole']


class _MessageRoleListUpdatePush(TypedDict):
    push: List['enums.MessageRole']


MessageRoleListUpdate = Union[
    List['enums.MessageRole'],
    _MessageRoleListUpdateSet,
    _MessageRoleListUpdatePush,
]

class _FileNamingFormatListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.FileNamingFormat']]


class _FileNamingFormatListFilterHasInput(TypedDict):
    has: 'enums.FileNamingFormat'


class _FileNamingFormatListFilterHasEveryInput(TypedDict):
    has_every: List['enums.FileNamingFormat']


class _FileNamingFormatListFilterHasSomeInput(TypedDict):
    has_some: List['enums.FileNamingFormat']


class _FileNamingFormatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FileNamingFormatListFilter = Union[
    _FileNamingFormatListFilterHasInput,
    _FileNamingFormatListFilterEqualsInput,
    _FileNamingFormatListFilterHasSomeInput,
    _FileNamingFormatListFilterIsEmptyInput,
    _FileNamingFormatListFilterHasEveryInput,
]


class _FileNamingFormatListUpdateSet(TypedDict):
    set: List['enums.FileNamingFormat']


class _FileNamingFormatListUpdatePush(TypedDict):
    push: List['enums.FileNamingFormat']


FileNamingFormatListUpdate = Union[
    List['enums.FileNamingFormat'],
    _FileNamingFormatListUpdateSet,
    _FileNamingFormatListUpdatePush,
]

class _SecurityActionListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.SecurityAction']]


class _SecurityActionListFilterHasInput(TypedDict):
    has: 'enums.SecurityAction'


class _SecurityActionListFilterHasEveryInput(TypedDict):
    has_every: List['enums.SecurityAction']


class _SecurityActionListFilterHasSomeInput(TypedDict):
    has_some: List['enums.SecurityAction']


class _SecurityActionListFilterIsEmptyInput(TypedDict):
    is_empty: bool


SecurityActionListFilter = Union[
    _SecurityActionListFilterHasInput,
    _SecurityActionListFilterEqualsInput,
    _SecurityActionListFilterHasSomeInput,
    _SecurityActionListFilterIsEmptyInput,
    _SecurityActionListFilterHasEveryInput,
]


class _SecurityActionListUpdateSet(TypedDict):
    set: List['enums.SecurityAction']


class _SecurityActionListUpdatePush(TypedDict):
    push: List['enums.SecurityAction']


SecurityActionListUpdate = Union[
    List['enums.SecurityAction'],
    _SecurityActionListUpdateSet,
    _SecurityActionListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    job_title: Optional[_str]
    profile_picture: Optional[_str]
    status: 'enums.UserStatus'
    email_verified: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    last_login_at: Optional[datetime.datetime]
    documents: 'DocumentCreateManyNestedWithoutRelationsInput'
    chat_sessions: 'ChatSessionCreateManyNestedWithoutRelationsInput'
    security_logs: 'SecurityLogCreateManyNestedWithoutRelationsInput'
    accounts: 'AccountCreateManyNestedWithoutRelationsInput'
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    verification_tokens: 'VerificationTokenCreateManyNestedWithoutRelationsInput'
    subscription: 'SubscriptionCreateNestedWithoutRelationsInput'
    user_settings: 'UserSettingsCreateNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    job_title: Optional[_str]
    profile_picture: Optional[_str]
    status: 'enums.UserStatus'
    email_verified: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    last_login_at: Optional[datetime.datetime]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: Optional[_str]
    email: _str
    password: _str
    job_title: Optional[_str]
    profile_picture: Optional[_str]
    status: 'enums.UserStatus'
    email_verified: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    last_login_at: Optional[datetime.datetime]
    documents: 'DocumentUpdateManyWithoutRelationsInput'
    chat_sessions: 'ChatSessionUpdateManyWithoutRelationsInput'
    security_logs: 'SecurityLogUpdateManyWithoutRelationsInput'
    accounts: 'AccountUpdateManyWithoutRelationsInput'
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    verification_tokens: 'VerificationTokenUpdateManyWithoutRelationsInput'
    subscription: 'SubscriptionUpdateOneWithoutRelationsInput'
    user_settings: 'UserSettingsUpdateOneWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: Optional[_str]
    email: _str
    password: _str
    job_title: Optional[_str]
    profile_picture: Optional[_str]
    status: 'enums.UserStatus'
    email_verified: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    last_login_at: Optional[datetime.datetime]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_job_title_OrderByInput = TypedDict(
    '_User_job_title_OrderByInput',
    {
        'job_title': 'SortOrder',
    },
    total=True
)

_User_profile_picture_OrderByInput = TypedDict(
    '_User_profile_picture_OrderByInput',
    {
        'profile_picture': 'SortOrder',
    },
    total=True
)

_User_status_OrderByInput = TypedDict(
    '_User_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_User_email_verified_OrderByInput = TypedDict(
    '_User_email_verified_OrderByInput',
    {
        'email_verified': 'SortOrder',
    },
    total=True
)

_User_created_at_OrderByInput = TypedDict(
    '_User_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_User_updated_at_OrderByInput = TypedDict(
    '_User_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_User_last_login_at_OrderByInput = TypedDict(
    '_User_last_login_at_OrderByInput',
    {
        'last_login_at': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_job_title_OrderByInput',
    '_User_profile_picture_OrderByInput',
    '_User_status_OrderByInput',
    '_User_email_verified_OrderByInput',
    '_User_created_at_OrderByInput',
    '_User_updated_at_OrderByInput',
    '_User_last_login_at_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    documents: Union[bool, 'FindManyDocumentArgsFromUser']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUser']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUser']
    accounts: Union[bool, 'FindManyAccountArgsFromUser']
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUser']
    subscription: Union[bool, 'SubscriptionArgsFromUser']
    user_settings: Union[bool, 'UserSettingsArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    documents: Union[bool, 'FindManyDocumentArgsFromUserRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUserRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUserRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromUserRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    documents: Union[bool, 'FindManyDocumentArgsFromUserRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUserRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUserRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromUserRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    documents: Union[bool, 'FindManyDocumentArgsFromUserRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUserRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUserRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromUserRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    documents: Union[bool, 'FindManyDocumentArgsFromUserRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUserRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUserRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromUserRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SubscriptionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SubscriptionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SubscriptionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SubscriptionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SubscriptionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySubscriptionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class UserSettingsIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class UserSettingsIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class UserSettingsIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class UserSettingsIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserSettingsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserSettingsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserRecursive1']


class DocumentIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserRecursive2']


class DocumentIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserRecursive3']


class DocumentIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserRecursive4']


class DocumentIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DocumentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDocumentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    document: Union[bool, 'DocumentArgsFromUserRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromUserRecursive1']


class ChatSessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    document: Union[bool, 'DocumentArgsFromUserRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromUserRecursive2']


class ChatSessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    document: Union[bool, 'DocumentArgsFromUserRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromUserRecursive3']


class ChatSessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    document: Union[bool, 'DocumentArgsFromUserRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromUserRecursive4']


class ChatSessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ChatSessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyChatSessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    session: Union[bool, 'ChatSessionArgsFromUserRecursive1']


class ChatMessageIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    session: Union[bool, 'ChatSessionArgsFromUserRecursive2']


class ChatMessageIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    session: Union[bool, 'ChatSessionArgsFromUserRecursive3']


class ChatMessageIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    session: Union[bool, 'ChatSessionArgsFromUserRecursive4']


class ChatMessageIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ChatMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyChatMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SecurityLogIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SecurityLogIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SecurityLogIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SecurityLogIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SecurityLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySecurityLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class VerificationTokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class VerificationTokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class VerificationTokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class VerificationTokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class AccountIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class AccountIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class AccountIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class AccountIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    job_title: Union[None, _str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    last_login_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    documents: 'DocumentListRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'
    security_logs: 'SecurityLogListRelationFilter'
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    verification_tokens: 'VerificationTokenListRelationFilter'
    subscription: 'SubscriptionRelationFilter'
    user_settings: 'UserSettingsRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    job_title: Union[None, _str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    last_login_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    documents: 'DocumentListRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'
    security_logs: 'SecurityLogListRelationFilter'
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    verification_tokens: 'VerificationTokenListRelationFilter'
    subscription: 'SubscriptionRelationFilter'
    user_settings: 'UserSettingsRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    job_title: Union[None, _str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    last_login_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    documents: 'DocumentListRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'
    security_logs: 'SecurityLogListRelationFilter'
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    verification_tokens: 'VerificationTokenListRelationFilter'
    subscription: 'SubscriptionRelationFilter'
    user_settings: 'UserSettingsRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    job_title: Union[None, _str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    last_login_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    documents: 'DocumentListRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'
    security_logs: 'SecurityLogListRelationFilter'
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    verification_tokens: 'VerificationTokenListRelationFilter'
    subscription: 'SubscriptionRelationFilter'
    user_settings: 'UserSettingsRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    job_title: Union[None, _str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    last_login_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    documents: 'DocumentListRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'
    security_logs: 'SecurityLogListRelationFilter'
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    verification_tokens: 'VerificationTokenListRelationFilter'
    subscription: 'SubscriptionRelationFilter'
    user_settings: 'UserSettingsRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    job_title: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    last_login_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    job_title: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    last_login_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    job_title: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    last_login_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    job_title: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    last_login_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    job_title: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    email_verified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    last_login_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    email: _str
    password: _str
    job_title: _str
    profile_picture: _str
    status: 'enums.UserStatus'
    email_verified: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    last_login_at: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    name: _str
    email: _str
    password: _str
    job_title: _str
    profile_picture: _str
    status: 'enums.UserStatus'
    email_verified: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    last_login_at: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    password: bool
    job_title: bool
    profile_picture: bool
    status: bool
    email_verified: bool
    created_at: bool
    updated_at: bool
    last_login_at: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    password: bool
    job_title: bool
    profile_picture: bool
    status: bool
    email_verified: bool
    created_at: bool
    updated_at: bool
    last_login_at: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'password': bool,
        'job_title': bool,
        'profile_picture': bool,
        'status': bool,
        'email_verified': bool,
        'created_at': bool,
        'updated_at': bool,
        'last_login_at': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'password': int,
        'job_title': int,
        'profile_picture': int,
        'status': int,
        'email_verified': int,
        'created_at': int,
        'updated_at': int,
        'last_login_at': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'email',
    'password',
    'job_title',
    'profile_picture',
    'status',
    'email_verified',
    'created_at',
    'updated_at',
    'last_login_at',
    'documents',
    'chat_sessions',
    'security_logs',
    'accounts',
    'sessions',
    'verification_tokens',
    'subscription',
    'user_settings',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'password',
    'job_title',
    'profile_picture',
    'status',
    'email_verified',
    'created_at',
    'updated_at',
    'last_login_at',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'documents',
        'chat_sessions',
        'security_logs',
        'accounts',
        'sessions',
        'verification_tokens',
        'subscription',
        'user_settings',
    ]

# Subscription types

class SubscriptionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Subscription create method"""
    id: _str
    user_id: _str
    tokens_used: _int
    plan_type: 'enums.SubscriptionStatus'
    price: Optional[_float]
    currency: _str
    is_active: _bool
    auto_renew: _bool
    payment_method: Optional[_str]
    last_four_digits: Optional[_str]
    payment_provider: Optional[_str]
    external_subscription_id: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime
    cancelled_at: Optional[datetime.datetime]
    user: 'UserCreateNestedWithoutRelationsInput'


class SubscriptionCreateInput(SubscriptionOptionalCreateInput):
    """Required arguments to the Subscription create method"""
    token_limit: _int
    billing_date: datetime.datetime
    days_remaining: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SubscriptionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Subscription create method, without relations"""
    id: _str
    user_id: _str
    tokens_used: _int
    plan_type: 'enums.SubscriptionStatus'
    price: Optional[_float]
    currency: _str
    is_active: _bool
    auto_renew: _bool
    payment_method: Optional[_str]
    last_four_digits: Optional[_str]
    payment_provider: Optional[_str]
    external_subscription_id: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime
    cancelled_at: Optional[datetime.datetime]


class SubscriptionCreateWithoutRelationsInput(SubscriptionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Subscription create method, without relations"""
    token_limit: _int
    billing_date: datetime.datetime
    days_remaining: _int

class SubscriptionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SubscriptionCreateWithoutRelationsInput'
    where: 'SubscriptionWhereUniqueInput'

class SubscriptionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SubscriptionCreateWithoutRelationsInput'
    connect: 'SubscriptionWhereUniqueInput'
    connect_or_create: 'SubscriptionConnectOrCreateWithoutRelationsInput'


class SubscriptionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SubscriptionCreateWithoutRelationsInput', List['SubscriptionCreateWithoutRelationsInput']]
    connect: Union['SubscriptionWhereUniqueInput', List['SubscriptionWhereUniqueInput']]
    connect_or_create: Union['SubscriptionConnectOrCreateWithoutRelationsInput', List['SubscriptionConnectOrCreateWithoutRelationsInput']]

_SubscriptionWhereUnique_id_Input = TypedDict(
    '_SubscriptionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SubscriptionWhereUnique_user_id_Input = TypedDict(
    '_SubscriptionWhereUnique_user_id_Input',
    {
        'user_id': '_str',
    },
    total=True
)

SubscriptionWhereUniqueInput = Union[
    '_SubscriptionWhereUnique_id_Input',
    '_SubscriptionWhereUnique_user_id_Input',
]


class SubscriptionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    tokens_used: Union[AtomicIntInput, _int]
    token_limit: Union[AtomicIntInput, _int]
    billing_date: datetime.datetime
    days_remaining: Union[AtomicIntInput, _int]
    plan_type: 'enums.SubscriptionStatus'
    price: Optional[Union[AtomicFloatInput, _float]]
    currency: _str
    is_active: _bool
    auto_renew: _bool
    payment_method: Optional[_str]
    last_four_digits: Optional[_str]
    payment_provider: Optional[_str]
    external_subscription_id: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime
    cancelled_at: Optional[datetime.datetime]
    user: 'UserUpdateOneWithoutRelationsInput'


class SubscriptionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    tokens_used: Union[AtomicIntInput, _int]
    token_limit: Union[AtomicIntInput, _int]
    billing_date: datetime.datetime
    days_remaining: Union[AtomicIntInput, _int]
    plan_type: 'enums.SubscriptionStatus'
    price: Optional[Union[AtomicFloatInput, _float]]
    currency: _str
    is_active: _bool
    auto_renew: _bool
    payment_method: Optional[_str]
    last_four_digits: Optional[_str]
    payment_provider: Optional[_str]
    external_subscription_id: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime
    cancelled_at: Optional[datetime.datetime]


class SubscriptionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SubscriptionCreateWithoutRelationsInput']
    connect: List['SubscriptionWhereUniqueInput']
    connect_or_create: List['SubscriptionConnectOrCreateWithoutRelationsInput']
    set: List['SubscriptionWhereUniqueInput']
    disconnect: List['SubscriptionWhereUniqueInput']
    delete: List['SubscriptionWhereUniqueInput']

    # TODO
    # update: List['SubscriptionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SubscriptionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SubscriptionScalarWhereInput']
    # upsert: List['SubscriptionUpserteWithWhereUniqueWithoutRelationsInput']


class SubscriptionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SubscriptionCreateWithoutRelationsInput'
    connect: 'SubscriptionWhereUniqueInput'
    connect_or_create: 'SubscriptionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SubscriptionUpdateInput'
    # upsert: 'SubscriptionUpsertWithoutRelationsInput'


class SubscriptionUpsertInput(TypedDict):
    create: 'SubscriptionCreateInput'
    update: 'SubscriptionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Subscription_id_OrderByInput = TypedDict(
    '_Subscription_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Subscription_user_id_OrderByInput = TypedDict(
    '_Subscription_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Subscription_tokens_used_OrderByInput = TypedDict(
    '_Subscription_tokens_used_OrderByInput',
    {
        'tokens_used': 'SortOrder',
    },
    total=True
)

_Subscription_token_limit_OrderByInput = TypedDict(
    '_Subscription_token_limit_OrderByInput',
    {
        'token_limit': 'SortOrder',
    },
    total=True
)

_Subscription_billing_date_OrderByInput = TypedDict(
    '_Subscription_billing_date_OrderByInput',
    {
        'billing_date': 'SortOrder',
    },
    total=True
)

_Subscription_days_remaining_OrderByInput = TypedDict(
    '_Subscription_days_remaining_OrderByInput',
    {
        'days_remaining': 'SortOrder',
    },
    total=True
)

_Subscription_plan_type_OrderByInput = TypedDict(
    '_Subscription_plan_type_OrderByInput',
    {
        'plan_type': 'SortOrder',
    },
    total=True
)

_Subscription_price_OrderByInput = TypedDict(
    '_Subscription_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Subscription_currency_OrderByInput = TypedDict(
    '_Subscription_currency_OrderByInput',
    {
        'currency': 'SortOrder',
    },
    total=True
)

_Subscription_is_active_OrderByInput = TypedDict(
    '_Subscription_is_active_OrderByInput',
    {
        'is_active': 'SortOrder',
    },
    total=True
)

_Subscription_auto_renew_OrderByInput = TypedDict(
    '_Subscription_auto_renew_OrderByInput',
    {
        'auto_renew': 'SortOrder',
    },
    total=True
)

_Subscription_payment_method_OrderByInput = TypedDict(
    '_Subscription_payment_method_OrderByInput',
    {
        'payment_method': 'SortOrder',
    },
    total=True
)

_Subscription_last_four_digits_OrderByInput = TypedDict(
    '_Subscription_last_four_digits_OrderByInput',
    {
        'last_four_digits': 'SortOrder',
    },
    total=True
)

_Subscription_payment_provider_OrderByInput = TypedDict(
    '_Subscription_payment_provider_OrderByInput',
    {
        'payment_provider': 'SortOrder',
    },
    total=True
)

_Subscription_external_subscription_id_OrderByInput = TypedDict(
    '_Subscription_external_subscription_id_OrderByInput',
    {
        'external_subscription_id': 'SortOrder',
    },
    total=True
)

_Subscription_created_at_OrderByInput = TypedDict(
    '_Subscription_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Subscription_updated_at_OrderByInput = TypedDict(
    '_Subscription_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Subscription_cancelled_at_OrderByInput = TypedDict(
    '_Subscription_cancelled_at_OrderByInput',
    {
        'cancelled_at': 'SortOrder',
    },
    total=True
)

_Subscription_RelevanceInner = TypedDict(
    '_Subscription_RelevanceInner',
    {
        'fields': 'List[SubscriptionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Subscription_RelevanceOrderByInput = TypedDict(
    '_Subscription_RelevanceOrderByInput',
    {
        '_relevance': '_Subscription_RelevanceInner',
    },
    total=True
)

SubscriptionOrderByInput = Union[
    '_Subscription_id_OrderByInput',
    '_Subscription_user_id_OrderByInput',
    '_Subscription_tokens_used_OrderByInput',
    '_Subscription_token_limit_OrderByInput',
    '_Subscription_billing_date_OrderByInput',
    '_Subscription_days_remaining_OrderByInput',
    '_Subscription_plan_type_OrderByInput',
    '_Subscription_price_OrderByInput',
    '_Subscription_currency_OrderByInput',
    '_Subscription_is_active_OrderByInput',
    '_Subscription_auto_renew_OrderByInput',
    '_Subscription_payment_method_OrderByInput',
    '_Subscription_last_four_digits_OrderByInput',
    '_Subscription_payment_provider_OrderByInput',
    '_Subscription_external_subscription_id_OrderByInput',
    '_Subscription_created_at_OrderByInput',
    '_Subscription_updated_at_OrderByInput',
    '_Subscription_cancelled_at_OrderByInput',
    '_Subscription_RelevanceOrderByInput',
]



# recursive Subscription types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SubscriptionRelationFilter = TypedDict(
    'SubscriptionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SubscriptionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SubscriptionInclude(TypedDict, total=False):
    """Subscription relational arguments"""
    user: Union[bool, 'UserArgsFromSubscription']


    

class UserIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    documents: Union[bool, 'FindManyDocumentArgsFromSubscriptionRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSubscriptionRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSubscriptionRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromSubscriptionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSubscriptionRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSubscriptionRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromSubscriptionRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromSubscriptionRecursive1']


class UserIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    documents: Union[bool, 'FindManyDocumentArgsFromSubscriptionRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSubscriptionRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSubscriptionRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromSubscriptionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSubscriptionRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSubscriptionRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromSubscriptionRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromSubscriptionRecursive2']


class UserIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    documents: Union[bool, 'FindManyDocumentArgsFromSubscriptionRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSubscriptionRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSubscriptionRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromSubscriptionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSubscriptionRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSubscriptionRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromSubscriptionRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromSubscriptionRecursive3']


class UserIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    documents: Union[bool, 'FindManyDocumentArgsFromSubscriptionRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSubscriptionRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSubscriptionRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromSubscriptionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSubscriptionRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSubscriptionRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromSubscriptionRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromSubscriptionRecursive4']


class UserIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class UserArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManyUserArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive1']


class SubscriptionIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive2']


class SubscriptionIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive3']


class SubscriptionIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive4']


class SubscriptionIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class SubscriptionArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManySubscriptionArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive1']


class UserSettingsIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive2']


class UserSettingsIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive3']


class UserSettingsIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive4']


class UserSettingsIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class UserSettingsArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManyUserSettingsArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    owner: Union[bool, 'UserArgsFromSubscriptionRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSubscriptionRecursive1']


class DocumentIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    owner: Union[bool, 'UserArgsFromSubscriptionRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSubscriptionRecursive2']


class DocumentIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    owner: Union[bool, 'UserArgsFromSubscriptionRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSubscriptionRecursive3']


class DocumentIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    owner: Union[bool, 'UserArgsFromSubscriptionRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSubscriptionRecursive4']


class DocumentIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class DocumentArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManyDocumentArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive1']
    document: Union[bool, 'DocumentArgsFromSubscriptionRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromSubscriptionRecursive1']


class ChatSessionIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive2']
    document: Union[bool, 'DocumentArgsFromSubscriptionRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromSubscriptionRecursive2']


class ChatSessionIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive3']
    document: Union[bool, 'DocumentArgsFromSubscriptionRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromSubscriptionRecursive3']


class ChatSessionIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive4']
    document: Union[bool, 'DocumentArgsFromSubscriptionRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromSubscriptionRecursive4']


class ChatSessionIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class ChatSessionArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManyChatSessionArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    session: Union[bool, 'ChatSessionArgsFromSubscriptionRecursive1']


class ChatMessageIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    session: Union[bool, 'ChatSessionArgsFromSubscriptionRecursive2']


class ChatMessageIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    session: Union[bool, 'ChatSessionArgsFromSubscriptionRecursive3']


class ChatMessageIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    session: Union[bool, 'ChatSessionArgsFromSubscriptionRecursive4']


class ChatMessageIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class ChatMessageArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManyChatMessageArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive1']


class SecurityLogIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive2']


class SecurityLogIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive3']


class SecurityLogIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive4']


class SecurityLogIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class SecurityLogArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManySecurityLogArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive1']


class VerificationTokenIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive2']


class VerificationTokenIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive3']


class VerificationTokenIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive4']


class VerificationTokenIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class VerificationTokenArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManyVerificationTokenArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive1']


class AccountIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive2']


class AccountIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive3']


class AccountIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive4']


class AccountIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class AccountArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManyAccountArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSubscription(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive1']


class SessionIncludeFromSubscriptionRecursive1(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive2']


class SessionIncludeFromSubscriptionRecursive2(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive3']


class SessionIncludeFromSubscriptionRecursive3(TypedDict, total=False):
    """Relational arguments for Subscription"""
    user: Union[bool, 'UserArgsFromSubscriptionRecursive4']


class SessionIncludeFromSubscriptionRecursive4(TypedDict, total=False):
    """Relational arguments for Subscription"""

    

class SessionArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    
    

class FindManySessionArgsFromSubscription(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSubscriptionRecursive1(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSubscriptionRecursive2(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSubscriptionRecursive3(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSubscriptionRecursive4(TypedDict, total=False):
    """Arguments for Subscription"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManySubscriptionArgs = FindManySubscriptionArgsFromSubscription
FindFirstSubscriptionArgs = FindManySubscriptionArgsFromSubscription


    

class SubscriptionWhereInput(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    tokens_used: Union[_int, 'types.IntFilter']
    token_limit: Union[_int, 'types.IntFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeFilter']
    days_remaining: Union[_int, 'types.IntFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[None, _float, 'types.FloatFilter']
    currency: Union[_str, 'types.StringFilter']
    is_active: Union[_bool, 'types.BooleanFilter']
    auto_renew: Union[_bool, 'types.BooleanFilter']
    payment_method: Union[None, _str, 'types.StringFilter']
    last_four_digits: Union[None, _str, 'types.StringFilter']
    payment_provider: Union[None, _str, 'types.StringFilter']
    external_subscription_id: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    cancelled_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SubscriptionWhereInputRecursive1', List['SubscriptionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SubscriptionWhereInputRecursive1']
    OR: List['SubscriptionWhereInputRecursive1']
    NOT: List['SubscriptionWhereInputRecursive1']


class SubscriptionWhereInputRecursive1(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    tokens_used: Union[_int, 'types.IntFilter']
    token_limit: Union[_int, 'types.IntFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeFilter']
    days_remaining: Union[_int, 'types.IntFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[None, _float, 'types.FloatFilter']
    currency: Union[_str, 'types.StringFilter']
    is_active: Union[_bool, 'types.BooleanFilter']
    auto_renew: Union[_bool, 'types.BooleanFilter']
    payment_method: Union[None, _str, 'types.StringFilter']
    last_four_digits: Union[None, _str, 'types.StringFilter']
    payment_provider: Union[None, _str, 'types.StringFilter']
    external_subscription_id: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    cancelled_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SubscriptionWhereInputRecursive2', List['SubscriptionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SubscriptionWhereInputRecursive2']
    OR: List['SubscriptionWhereInputRecursive2']
    NOT: List['SubscriptionWhereInputRecursive2']


class SubscriptionWhereInputRecursive2(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    tokens_used: Union[_int, 'types.IntFilter']
    token_limit: Union[_int, 'types.IntFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeFilter']
    days_remaining: Union[_int, 'types.IntFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[None, _float, 'types.FloatFilter']
    currency: Union[_str, 'types.StringFilter']
    is_active: Union[_bool, 'types.BooleanFilter']
    auto_renew: Union[_bool, 'types.BooleanFilter']
    payment_method: Union[None, _str, 'types.StringFilter']
    last_four_digits: Union[None, _str, 'types.StringFilter']
    payment_provider: Union[None, _str, 'types.StringFilter']
    external_subscription_id: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    cancelled_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SubscriptionWhereInputRecursive3', List['SubscriptionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SubscriptionWhereInputRecursive3']
    OR: List['SubscriptionWhereInputRecursive3']
    NOT: List['SubscriptionWhereInputRecursive3']


class SubscriptionWhereInputRecursive3(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    tokens_used: Union[_int, 'types.IntFilter']
    token_limit: Union[_int, 'types.IntFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeFilter']
    days_remaining: Union[_int, 'types.IntFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[None, _float, 'types.FloatFilter']
    currency: Union[_str, 'types.StringFilter']
    is_active: Union[_bool, 'types.BooleanFilter']
    auto_renew: Union[_bool, 'types.BooleanFilter']
    payment_method: Union[None, _str, 'types.StringFilter']
    last_four_digits: Union[None, _str, 'types.StringFilter']
    payment_provider: Union[None, _str, 'types.StringFilter']
    external_subscription_id: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    cancelled_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SubscriptionWhereInputRecursive4', List['SubscriptionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SubscriptionWhereInputRecursive4']
    OR: List['SubscriptionWhereInputRecursive4']
    NOT: List['SubscriptionWhereInputRecursive4']


class SubscriptionWhereInputRecursive4(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    tokens_used: Union[_int, 'types.IntFilter']
    token_limit: Union[_int, 'types.IntFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeFilter']
    days_remaining: Union[_int, 'types.IntFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[None, _float, 'types.FloatFilter']
    currency: Union[_str, 'types.StringFilter']
    is_active: Union[_bool, 'types.BooleanFilter']
    auto_renew: Union[_bool, 'types.BooleanFilter']
    payment_method: Union[None, _str, 'types.StringFilter']
    last_four_digits: Union[None, _str, 'types.StringFilter']
    payment_provider: Union[None, _str, 'types.StringFilter']
    external_subscription_id: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    cancelled_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Subscription types


    

class SubscriptionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    token_limit: Union[_int, 'types.IntWithAggregatesFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    days_remaining: Union[_int, 'types.IntWithAggregatesFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    is_active: Union[_bool, 'types.BooleanWithAggregatesFilter']
    auto_renew: Union[_bool, 'types.BooleanWithAggregatesFilter']
    payment_method: Union[_str, 'types.StringWithAggregatesFilter']
    last_four_digits: Union[_str, 'types.StringWithAggregatesFilter']
    payment_provider: Union[_str, 'types.StringWithAggregatesFilter']
    external_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    cancelled_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubscriptionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SubscriptionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SubscriptionScalarWhereWithAggregatesInputRecursive1']


class SubscriptionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    token_limit: Union[_int, 'types.IntWithAggregatesFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    days_remaining: Union[_int, 'types.IntWithAggregatesFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    is_active: Union[_bool, 'types.BooleanWithAggregatesFilter']
    auto_renew: Union[_bool, 'types.BooleanWithAggregatesFilter']
    payment_method: Union[_str, 'types.StringWithAggregatesFilter']
    last_four_digits: Union[_str, 'types.StringWithAggregatesFilter']
    payment_provider: Union[_str, 'types.StringWithAggregatesFilter']
    external_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    cancelled_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubscriptionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SubscriptionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SubscriptionScalarWhereWithAggregatesInputRecursive2']


class SubscriptionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    token_limit: Union[_int, 'types.IntWithAggregatesFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    days_remaining: Union[_int, 'types.IntWithAggregatesFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    is_active: Union[_bool, 'types.BooleanWithAggregatesFilter']
    auto_renew: Union[_bool, 'types.BooleanWithAggregatesFilter']
    payment_method: Union[_str, 'types.StringWithAggregatesFilter']
    last_four_digits: Union[_str, 'types.StringWithAggregatesFilter']
    payment_provider: Union[_str, 'types.StringWithAggregatesFilter']
    external_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    cancelled_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubscriptionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SubscriptionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SubscriptionScalarWhereWithAggregatesInputRecursive3']


class SubscriptionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    token_limit: Union[_int, 'types.IntWithAggregatesFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    days_remaining: Union[_int, 'types.IntWithAggregatesFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    is_active: Union[_bool, 'types.BooleanWithAggregatesFilter']
    auto_renew: Union[_bool, 'types.BooleanWithAggregatesFilter']
    payment_method: Union[_str, 'types.StringWithAggregatesFilter']
    last_four_digits: Union[_str, 'types.StringWithAggregatesFilter']
    payment_provider: Union[_str, 'types.StringWithAggregatesFilter']
    external_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    cancelled_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubscriptionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SubscriptionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SubscriptionScalarWhereWithAggregatesInputRecursive4']


class SubscriptionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Subscription arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    token_limit: Union[_int, 'types.IntWithAggregatesFilter']
    billing_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    days_remaining: Union[_int, 'types.IntWithAggregatesFilter']
    plan_type: 'enums.SubscriptionStatus'
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: Union[_str, 'types.StringWithAggregatesFilter']
    is_active: Union[_bool, 'types.BooleanWithAggregatesFilter']
    auto_renew: Union[_bool, 'types.BooleanWithAggregatesFilter']
    payment_method: Union[_str, 'types.StringWithAggregatesFilter']
    last_four_digits: Union[_str, 'types.StringWithAggregatesFilter']
    payment_provider: Union[_str, 'types.StringWithAggregatesFilter']
    external_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    cancelled_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SubscriptionGroupByOutput(TypedDict, total=False):
    id: _str
    user_id: _str
    tokens_used: _int
    token_limit: _int
    billing_date: datetime.datetime
    days_remaining: _int
    plan_type: 'enums.SubscriptionStatus'
    price: _float
    currency: _str
    is_active: _bool
    auto_renew: _bool
    payment_method: _str
    last_four_digits: _str
    payment_provider: _str
    external_subscription_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    cancelled_at: datetime.datetime
    _sum: 'SubscriptionSumAggregateOutput'
    _avg: 'SubscriptionAvgAggregateOutput'
    _min: 'SubscriptionMinAggregateOutput'
    _max: 'SubscriptionMaxAggregateOutput'
    _count: 'SubscriptionCountAggregateOutput'


class SubscriptionAvgAggregateOutput(TypedDict, total=False):
    """Subscription output for aggregating averages"""
    tokens_used: float
    token_limit: float
    days_remaining: float
    price: float


class SubscriptionSumAggregateOutput(TypedDict, total=False):
    """Subscription output for aggregating sums"""
    tokens_used: _int
    token_limit: _int
    days_remaining: _int
    price: _float


class SubscriptionScalarAggregateOutput(TypedDict, total=False):
    """Subscription output including scalar fields"""
    id: _str
    user_id: _str
    tokens_used: _int
    token_limit: _int
    billing_date: datetime.datetime
    days_remaining: _int
    plan_type: 'enums.SubscriptionStatus'
    price: _float
    currency: _str
    is_active: _bool
    auto_renew: _bool
    payment_method: _str
    last_four_digits: _str
    payment_provider: _str
    external_subscription_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    cancelled_at: datetime.datetime


SubscriptionMinAggregateOutput = SubscriptionScalarAggregateOutput
SubscriptionMaxAggregateOutput = SubscriptionScalarAggregateOutput


class SubscriptionMaxAggregateInput(TypedDict, total=False):
    """Subscription input for aggregating by max"""
    id: bool
    user_id: bool
    tokens_used: bool
    token_limit: bool
    billing_date: bool
    days_remaining: bool
    plan_type: bool
    price: bool
    currency: bool
    is_active: bool
    auto_renew: bool
    payment_method: bool
    last_four_digits: bool
    payment_provider: bool
    external_subscription_id: bool
    created_at: bool
    updated_at: bool
    cancelled_at: bool


class SubscriptionMinAggregateInput(TypedDict, total=False):
    """Subscription input for aggregating by min"""
    id: bool
    user_id: bool
    tokens_used: bool
    token_limit: bool
    billing_date: bool
    days_remaining: bool
    plan_type: bool
    price: bool
    currency: bool
    is_active: bool
    auto_renew: bool
    payment_method: bool
    last_four_digits: bool
    payment_provider: bool
    external_subscription_id: bool
    created_at: bool
    updated_at: bool
    cancelled_at: bool


class SubscriptionNumberAggregateInput(TypedDict, total=False):
    """Subscription input for aggregating numbers"""
    tokens_used: bool
    token_limit: bool
    days_remaining: bool
    price: bool


SubscriptionAvgAggregateInput = SubscriptionNumberAggregateInput
SubscriptionSumAggregateInput = SubscriptionNumberAggregateInput


SubscriptionCountAggregateInput = TypedDict(
    'SubscriptionCountAggregateInput',
    {
        'id': bool,
        'user_id': bool,
        'tokens_used': bool,
        'token_limit': bool,
        'billing_date': bool,
        'days_remaining': bool,
        'plan_type': bool,
        'price': bool,
        'currency': bool,
        'is_active': bool,
        'auto_renew': bool,
        'payment_method': bool,
        'last_four_digits': bool,
        'payment_provider': bool,
        'external_subscription_id': bool,
        'created_at': bool,
        'updated_at': bool,
        'cancelled_at': bool,
        '_all': bool,
    },
    total=False,
)

SubscriptionCountAggregateOutput = TypedDict(
    'SubscriptionCountAggregateOutput',
    {
        'id': int,
        'user_id': int,
        'tokens_used': int,
        'token_limit': int,
        'billing_date': int,
        'days_remaining': int,
        'plan_type': int,
        'price': int,
        'currency': int,
        'is_active': int,
        'auto_renew': int,
        'payment_method': int,
        'last_four_digits': int,
        'payment_provider': int,
        'external_subscription_id': int,
        'created_at': int,
        'updated_at': int,
        'cancelled_at': int,
        '_all': int,
    },
    total=False,
)


SubscriptionKeys = Literal[
    'id',
    'user_id',
    'tokens_used',
    'token_limit',
    'billing_date',
    'days_remaining',
    'plan_type',
    'price',
    'currency',
    'is_active',
    'auto_renew',
    'payment_method',
    'last_four_digits',
    'payment_provider',
    'external_subscription_id',
    'created_at',
    'updated_at',
    'cancelled_at',
    'user',
]
SubscriptionScalarFieldKeys = Literal[
    'id',
    'user_id',
    'tokens_used',
    'token_limit',
    'billing_date',
    'days_remaining',
    'plan_type',
    'price',
    'currency',
    'is_active',
    'auto_renew',
    'payment_method',
    'last_four_digits',
    'payment_provider',
    'external_subscription_id',
    'created_at',
    'updated_at',
    'cancelled_at',
]
SubscriptionScalarFieldKeysT = TypeVar('SubscriptionScalarFieldKeysT', bound=SubscriptionScalarFieldKeys)

SubscriptionRelationalFieldKeys = Literal[
        'user',
    ]

# UserSettings types

class UserSettingsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserSettings create method"""
    id: _str
    user_id: _str
    ai_personality: Optional[_str]
    voice_enabled: _bool
    preferred_voice: Optional[_str]
    auto_rename_files: _bool
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Optional[_str]
    file_client_name: Optional[_str]
    file_retention_days: Optional[_int]
    auto_delete_files: _bool
    max_file_size_mb: _int
    two_factor_enabled: _bool
    two_factor_secret: Optional[_str]
    login_notifications: _bool
    security_alerts: _bool
    data_sharing_consent: _bool
    analytics_consent: _bool
    marketing_emails: _bool
    theme: _str
    language: _str
    timezone: _str
    date_format: _str
    email_notifications: _bool
    push_notifications: _bool
    last_settings_update: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class UserSettingsCreateInput(UserSettingsOptionalCreateInput):
    """Required arguments to the UserSettings create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserSettingsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserSettings create method, without relations"""
    id: _str
    user_id: _str
    ai_personality: Optional[_str]
    voice_enabled: _bool
    preferred_voice: Optional[_str]
    auto_rename_files: _bool
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Optional[_str]
    file_client_name: Optional[_str]
    file_retention_days: Optional[_int]
    auto_delete_files: _bool
    max_file_size_mb: _int
    two_factor_enabled: _bool
    two_factor_secret: Optional[_str]
    login_notifications: _bool
    security_alerts: _bool
    data_sharing_consent: _bool
    analytics_consent: _bool
    marketing_emails: _bool
    theme: _str
    language: _str
    timezone: _str
    date_format: _str
    email_notifications: _bool
    push_notifications: _bool
    last_settings_update: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime


class UserSettingsCreateWithoutRelationsInput(UserSettingsOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserSettings create method, without relations"""

class UserSettingsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserSettingsCreateWithoutRelationsInput'
    where: 'UserSettingsWhereUniqueInput'

class UserSettingsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserSettingsCreateWithoutRelationsInput'
    connect: 'UserSettingsWhereUniqueInput'
    connect_or_create: 'UserSettingsConnectOrCreateWithoutRelationsInput'


class UserSettingsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserSettingsCreateWithoutRelationsInput', List['UserSettingsCreateWithoutRelationsInput']]
    connect: Union['UserSettingsWhereUniqueInput', List['UserSettingsWhereUniqueInput']]
    connect_or_create: Union['UserSettingsConnectOrCreateWithoutRelationsInput', List['UserSettingsConnectOrCreateWithoutRelationsInput']]

_UserSettingsWhereUnique_id_Input = TypedDict(
    '_UserSettingsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserSettingsWhereUnique_user_id_Input = TypedDict(
    '_UserSettingsWhereUnique_user_id_Input',
    {
        'user_id': '_str',
    },
    total=True
)

UserSettingsWhereUniqueInput = Union[
    '_UserSettingsWhereUnique_id_Input',
    '_UserSettingsWhereUnique_user_id_Input',
]


class UserSettingsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    ai_personality: Optional[_str]
    voice_enabled: _bool
    preferred_voice: Optional[_str]
    auto_rename_files: _bool
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Optional[_str]
    file_client_name: Optional[_str]
    file_retention_days: Optional[Union[AtomicIntInput, _int]]
    auto_delete_files: _bool
    max_file_size_mb: Union[AtomicIntInput, _int]
    two_factor_enabled: _bool
    two_factor_secret: Optional[_str]
    login_notifications: _bool
    security_alerts: _bool
    data_sharing_consent: _bool
    analytics_consent: _bool
    marketing_emails: _bool
    theme: _str
    language: _str
    timezone: _str
    date_format: _str
    email_notifications: _bool
    push_notifications: _bool
    last_settings_update: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class UserSettingsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    ai_personality: Optional[_str]
    voice_enabled: _bool
    preferred_voice: Optional[_str]
    auto_rename_files: _bool
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Optional[_str]
    file_client_name: Optional[_str]
    file_retention_days: Optional[Union[AtomicIntInput, _int]]
    auto_delete_files: _bool
    max_file_size_mb: Union[AtomicIntInput, _int]
    two_factor_enabled: _bool
    two_factor_secret: Optional[_str]
    login_notifications: _bool
    security_alerts: _bool
    data_sharing_consent: _bool
    analytics_consent: _bool
    marketing_emails: _bool
    theme: _str
    language: _str
    timezone: _str
    date_format: _str
    email_notifications: _bool
    push_notifications: _bool
    last_settings_update: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime


class UserSettingsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserSettingsCreateWithoutRelationsInput']
    connect: List['UserSettingsWhereUniqueInput']
    connect_or_create: List['UserSettingsConnectOrCreateWithoutRelationsInput']
    set: List['UserSettingsWhereUniqueInput']
    disconnect: List['UserSettingsWhereUniqueInput']
    delete: List['UserSettingsWhereUniqueInput']

    # TODO
    # update: List['UserSettingsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserSettingsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserSettingsScalarWhereInput']
    # upsert: List['UserSettingsUpserteWithWhereUniqueWithoutRelationsInput']


class UserSettingsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserSettingsCreateWithoutRelationsInput'
    connect: 'UserSettingsWhereUniqueInput'
    connect_or_create: 'UserSettingsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserSettingsUpdateInput'
    # upsert: 'UserSettingsUpsertWithoutRelationsInput'


class UserSettingsUpsertInput(TypedDict):
    create: 'UserSettingsCreateInput'
    update: 'UserSettingsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserSettings_id_OrderByInput = TypedDict(
    '_UserSettings_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserSettings_user_id_OrderByInput = TypedDict(
    '_UserSettings_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_UserSettings_ai_personality_OrderByInput = TypedDict(
    '_UserSettings_ai_personality_OrderByInput',
    {
        'ai_personality': 'SortOrder',
    },
    total=True
)

_UserSettings_voice_enabled_OrderByInput = TypedDict(
    '_UserSettings_voice_enabled_OrderByInput',
    {
        'voice_enabled': 'SortOrder',
    },
    total=True
)

_UserSettings_preferred_voice_OrderByInput = TypedDict(
    '_UserSettings_preferred_voice_OrderByInput',
    {
        'preferred_voice': 'SortOrder',
    },
    total=True
)

_UserSettings_auto_rename_files_OrderByInput = TypedDict(
    '_UserSettings_auto_rename_files_OrderByInput',
    {
        'auto_rename_files': 'SortOrder',
    },
    total=True
)

_UserSettings_file_naming_format_OrderByInput = TypedDict(
    '_UserSettings_file_naming_format_OrderByInput',
    {
        'file_naming_format': 'SortOrder',
    },
    total=True
)

_UserSettings_file_naming_title_OrderByInput = TypedDict(
    '_UserSettings_file_naming_title_OrderByInput',
    {
        'file_naming_title': 'SortOrder',
    },
    total=True
)

_UserSettings_file_client_name_OrderByInput = TypedDict(
    '_UserSettings_file_client_name_OrderByInput',
    {
        'file_client_name': 'SortOrder',
    },
    total=True
)

_UserSettings_file_retention_days_OrderByInput = TypedDict(
    '_UserSettings_file_retention_days_OrderByInput',
    {
        'file_retention_days': 'SortOrder',
    },
    total=True
)

_UserSettings_auto_delete_files_OrderByInput = TypedDict(
    '_UserSettings_auto_delete_files_OrderByInput',
    {
        'auto_delete_files': 'SortOrder',
    },
    total=True
)

_UserSettings_max_file_size_mb_OrderByInput = TypedDict(
    '_UserSettings_max_file_size_mb_OrderByInput',
    {
        'max_file_size_mb': 'SortOrder',
    },
    total=True
)

_UserSettings_two_factor_enabled_OrderByInput = TypedDict(
    '_UserSettings_two_factor_enabled_OrderByInput',
    {
        'two_factor_enabled': 'SortOrder',
    },
    total=True
)

_UserSettings_two_factor_secret_OrderByInput = TypedDict(
    '_UserSettings_two_factor_secret_OrderByInput',
    {
        'two_factor_secret': 'SortOrder',
    },
    total=True
)

_UserSettings_login_notifications_OrderByInput = TypedDict(
    '_UserSettings_login_notifications_OrderByInput',
    {
        'login_notifications': 'SortOrder',
    },
    total=True
)

_UserSettings_security_alerts_OrderByInput = TypedDict(
    '_UserSettings_security_alerts_OrderByInput',
    {
        'security_alerts': 'SortOrder',
    },
    total=True
)

_UserSettings_data_sharing_consent_OrderByInput = TypedDict(
    '_UserSettings_data_sharing_consent_OrderByInput',
    {
        'data_sharing_consent': 'SortOrder',
    },
    total=True
)

_UserSettings_analytics_consent_OrderByInput = TypedDict(
    '_UserSettings_analytics_consent_OrderByInput',
    {
        'analytics_consent': 'SortOrder',
    },
    total=True
)

_UserSettings_marketing_emails_OrderByInput = TypedDict(
    '_UserSettings_marketing_emails_OrderByInput',
    {
        'marketing_emails': 'SortOrder',
    },
    total=True
)

_UserSettings_theme_OrderByInput = TypedDict(
    '_UserSettings_theme_OrderByInput',
    {
        'theme': 'SortOrder',
    },
    total=True
)

_UserSettings_language_OrderByInput = TypedDict(
    '_UserSettings_language_OrderByInput',
    {
        'language': 'SortOrder',
    },
    total=True
)

_UserSettings_timezone_OrderByInput = TypedDict(
    '_UserSettings_timezone_OrderByInput',
    {
        'timezone': 'SortOrder',
    },
    total=True
)

_UserSettings_date_format_OrderByInput = TypedDict(
    '_UserSettings_date_format_OrderByInput',
    {
        'date_format': 'SortOrder',
    },
    total=True
)

_UserSettings_email_notifications_OrderByInput = TypedDict(
    '_UserSettings_email_notifications_OrderByInput',
    {
        'email_notifications': 'SortOrder',
    },
    total=True
)

_UserSettings_push_notifications_OrderByInput = TypedDict(
    '_UserSettings_push_notifications_OrderByInput',
    {
        'push_notifications': 'SortOrder',
    },
    total=True
)

_UserSettings_last_settings_update_OrderByInput = TypedDict(
    '_UserSettings_last_settings_update_OrderByInput',
    {
        'last_settings_update': 'SortOrder',
    },
    total=True
)

_UserSettings_created_at_OrderByInput = TypedDict(
    '_UserSettings_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_UserSettings_updated_at_OrderByInput = TypedDict(
    '_UserSettings_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_UserSettings_RelevanceInner = TypedDict(
    '_UserSettings_RelevanceInner',
    {
        'fields': 'List[UserSettingsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserSettings_RelevanceOrderByInput = TypedDict(
    '_UserSettings_RelevanceOrderByInput',
    {
        '_relevance': '_UserSettings_RelevanceInner',
    },
    total=True
)

UserSettingsOrderByInput = Union[
    '_UserSettings_id_OrderByInput',
    '_UserSettings_user_id_OrderByInput',
    '_UserSettings_ai_personality_OrderByInput',
    '_UserSettings_voice_enabled_OrderByInput',
    '_UserSettings_preferred_voice_OrderByInput',
    '_UserSettings_auto_rename_files_OrderByInput',
    '_UserSettings_file_naming_format_OrderByInput',
    '_UserSettings_file_naming_title_OrderByInput',
    '_UserSettings_file_client_name_OrderByInput',
    '_UserSettings_file_retention_days_OrderByInput',
    '_UserSettings_auto_delete_files_OrderByInput',
    '_UserSettings_max_file_size_mb_OrderByInput',
    '_UserSettings_two_factor_enabled_OrderByInput',
    '_UserSettings_two_factor_secret_OrderByInput',
    '_UserSettings_login_notifications_OrderByInput',
    '_UserSettings_security_alerts_OrderByInput',
    '_UserSettings_data_sharing_consent_OrderByInput',
    '_UserSettings_analytics_consent_OrderByInput',
    '_UserSettings_marketing_emails_OrderByInput',
    '_UserSettings_theme_OrderByInput',
    '_UserSettings_language_OrderByInput',
    '_UserSettings_timezone_OrderByInput',
    '_UserSettings_date_format_OrderByInput',
    '_UserSettings_email_notifications_OrderByInput',
    '_UserSettings_push_notifications_OrderByInput',
    '_UserSettings_last_settings_update_OrderByInput',
    '_UserSettings_created_at_OrderByInput',
    '_UserSettings_updated_at_OrderByInput',
    '_UserSettings_RelevanceOrderByInput',
]



# recursive UserSettings types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserSettingsRelationFilter = TypedDict(
    'UserSettingsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserSettingsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserSettingsInclude(TypedDict, total=False):
    """UserSettings relational arguments"""
    user: Union[bool, 'UserArgsFromUserSettings']


    

class UserIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    documents: Union[bool, 'FindManyDocumentArgsFromUserSettingsRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserSettingsRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUserSettingsRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromUserSettingsRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserSettingsRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUserSettingsRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromUserSettingsRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromUserSettingsRecursive1']


class UserIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    documents: Union[bool, 'FindManyDocumentArgsFromUserSettingsRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserSettingsRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUserSettingsRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromUserSettingsRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserSettingsRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUserSettingsRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromUserSettingsRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromUserSettingsRecursive2']


class UserIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    documents: Union[bool, 'FindManyDocumentArgsFromUserSettingsRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserSettingsRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUserSettingsRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromUserSettingsRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserSettingsRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUserSettingsRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromUserSettingsRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromUserSettingsRecursive3']


class UserIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    documents: Union[bool, 'FindManyDocumentArgsFromUserSettingsRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserSettingsRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromUserSettingsRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromUserSettingsRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserSettingsRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromUserSettingsRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromUserSettingsRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromUserSettingsRecursive4']


class UserIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class UserArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManyUserArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive1']


class SubscriptionIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive2']


class SubscriptionIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive3']


class SubscriptionIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive4']


class SubscriptionIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class SubscriptionArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManySubscriptionArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive1']


class UserSettingsIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive2']


class UserSettingsIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive3']


class UserSettingsIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive4']


class UserSettingsIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class UserSettingsArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManyUserSettingsArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    owner: Union[bool, 'UserArgsFromUserSettingsRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserSettingsRecursive1']


class DocumentIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    owner: Union[bool, 'UserArgsFromUserSettingsRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserSettingsRecursive2']


class DocumentIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    owner: Union[bool, 'UserArgsFromUserSettingsRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserSettingsRecursive3']


class DocumentIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    owner: Union[bool, 'UserArgsFromUserSettingsRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromUserSettingsRecursive4']


class DocumentIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class DocumentArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManyDocumentArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive1']
    document: Union[bool, 'DocumentArgsFromUserSettingsRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromUserSettingsRecursive1']


class ChatSessionIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive2']
    document: Union[bool, 'DocumentArgsFromUserSettingsRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromUserSettingsRecursive2']


class ChatSessionIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive3']
    document: Union[bool, 'DocumentArgsFromUserSettingsRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromUserSettingsRecursive3']


class ChatSessionIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive4']
    document: Union[bool, 'DocumentArgsFromUserSettingsRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromUserSettingsRecursive4']


class ChatSessionIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class ChatSessionArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManyChatSessionArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    session: Union[bool, 'ChatSessionArgsFromUserSettingsRecursive1']


class ChatMessageIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    session: Union[bool, 'ChatSessionArgsFromUserSettingsRecursive2']


class ChatMessageIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    session: Union[bool, 'ChatSessionArgsFromUserSettingsRecursive3']


class ChatMessageIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    session: Union[bool, 'ChatSessionArgsFromUserSettingsRecursive4']


class ChatMessageIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class ChatMessageArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManyChatMessageArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive1']


class SecurityLogIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive2']


class SecurityLogIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive3']


class SecurityLogIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive4']


class SecurityLogIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class SecurityLogArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManySecurityLogArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive1']


class VerificationTokenIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive2']


class VerificationTokenIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive3']


class VerificationTokenIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive4']


class VerificationTokenIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class VerificationTokenArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManyVerificationTokenArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive1']


class AccountIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive2']


class AccountIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive3']


class AccountIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive4']


class AccountIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class AccountArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManyAccountArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUserSettings(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive1']


class SessionIncludeFromUserSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive2']


class SessionIncludeFromUserSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive3']


class SessionIncludeFromUserSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for UserSettings"""
    user: Union[bool, 'UserArgsFromUserSettingsRecursive4']


class SessionIncludeFromUserSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for UserSettings"""

    

class SessionArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    
    

class FindManySessionArgsFromUserSettings(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserSettingsRecursive1(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserSettingsRecursive2(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserSettingsRecursive3(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserSettingsRecursive4(TypedDict, total=False):
    """Arguments for UserSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManyUserSettingsArgs = FindManyUserSettingsArgsFromUserSettings
FindFirstUserSettingsArgs = FindManyUserSettingsArgsFromUserSettings


    

class UserSettingsWhereInput(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    ai_personality: Union[None, _str, 'types.StringFilter']
    voice_enabled: Union[_bool, 'types.BooleanFilter']
    preferred_voice: Union[None, _str, 'types.StringFilter']
    auto_rename_files: Union[_bool, 'types.BooleanFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[None, _str, 'types.StringFilter']
    file_client_name: Union[None, _str, 'types.StringFilter']
    file_retention_days: Union[None, _int, 'types.IntFilter']
    auto_delete_files: Union[_bool, 'types.BooleanFilter']
    max_file_size_mb: Union[_int, 'types.IntFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanFilter']
    two_factor_secret: Union[None, _str, 'types.StringFilter']
    login_notifications: Union[_bool, 'types.BooleanFilter']
    security_alerts: Union[_bool, 'types.BooleanFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanFilter']
    analytics_consent: Union[_bool, 'types.BooleanFilter']
    marketing_emails: Union[_bool, 'types.BooleanFilter']
    theme: Union[_str, 'types.StringFilter']
    language: Union[_str, 'types.StringFilter']
    timezone: Union[_str, 'types.StringFilter']
    date_format: Union[_str, 'types.StringFilter']
    email_notifications: Union[_bool, 'types.BooleanFilter']
    push_notifications: Union[_bool, 'types.BooleanFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserSettingsWhereInputRecursive1', List['UserSettingsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserSettingsWhereInputRecursive1']
    OR: List['UserSettingsWhereInputRecursive1']
    NOT: List['UserSettingsWhereInputRecursive1']


class UserSettingsWhereInputRecursive1(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    ai_personality: Union[None, _str, 'types.StringFilter']
    voice_enabled: Union[_bool, 'types.BooleanFilter']
    preferred_voice: Union[None, _str, 'types.StringFilter']
    auto_rename_files: Union[_bool, 'types.BooleanFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[None, _str, 'types.StringFilter']
    file_client_name: Union[None, _str, 'types.StringFilter']
    file_retention_days: Union[None, _int, 'types.IntFilter']
    auto_delete_files: Union[_bool, 'types.BooleanFilter']
    max_file_size_mb: Union[_int, 'types.IntFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanFilter']
    two_factor_secret: Union[None, _str, 'types.StringFilter']
    login_notifications: Union[_bool, 'types.BooleanFilter']
    security_alerts: Union[_bool, 'types.BooleanFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanFilter']
    analytics_consent: Union[_bool, 'types.BooleanFilter']
    marketing_emails: Union[_bool, 'types.BooleanFilter']
    theme: Union[_str, 'types.StringFilter']
    language: Union[_str, 'types.StringFilter']
    timezone: Union[_str, 'types.StringFilter']
    date_format: Union[_str, 'types.StringFilter']
    email_notifications: Union[_bool, 'types.BooleanFilter']
    push_notifications: Union[_bool, 'types.BooleanFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserSettingsWhereInputRecursive2', List['UserSettingsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserSettingsWhereInputRecursive2']
    OR: List['UserSettingsWhereInputRecursive2']
    NOT: List['UserSettingsWhereInputRecursive2']


class UserSettingsWhereInputRecursive2(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    ai_personality: Union[None, _str, 'types.StringFilter']
    voice_enabled: Union[_bool, 'types.BooleanFilter']
    preferred_voice: Union[None, _str, 'types.StringFilter']
    auto_rename_files: Union[_bool, 'types.BooleanFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[None, _str, 'types.StringFilter']
    file_client_name: Union[None, _str, 'types.StringFilter']
    file_retention_days: Union[None, _int, 'types.IntFilter']
    auto_delete_files: Union[_bool, 'types.BooleanFilter']
    max_file_size_mb: Union[_int, 'types.IntFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanFilter']
    two_factor_secret: Union[None, _str, 'types.StringFilter']
    login_notifications: Union[_bool, 'types.BooleanFilter']
    security_alerts: Union[_bool, 'types.BooleanFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanFilter']
    analytics_consent: Union[_bool, 'types.BooleanFilter']
    marketing_emails: Union[_bool, 'types.BooleanFilter']
    theme: Union[_str, 'types.StringFilter']
    language: Union[_str, 'types.StringFilter']
    timezone: Union[_str, 'types.StringFilter']
    date_format: Union[_str, 'types.StringFilter']
    email_notifications: Union[_bool, 'types.BooleanFilter']
    push_notifications: Union[_bool, 'types.BooleanFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserSettingsWhereInputRecursive3', List['UserSettingsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserSettingsWhereInputRecursive3']
    OR: List['UserSettingsWhereInputRecursive3']
    NOT: List['UserSettingsWhereInputRecursive3']


class UserSettingsWhereInputRecursive3(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    ai_personality: Union[None, _str, 'types.StringFilter']
    voice_enabled: Union[_bool, 'types.BooleanFilter']
    preferred_voice: Union[None, _str, 'types.StringFilter']
    auto_rename_files: Union[_bool, 'types.BooleanFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[None, _str, 'types.StringFilter']
    file_client_name: Union[None, _str, 'types.StringFilter']
    file_retention_days: Union[None, _int, 'types.IntFilter']
    auto_delete_files: Union[_bool, 'types.BooleanFilter']
    max_file_size_mb: Union[_int, 'types.IntFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanFilter']
    two_factor_secret: Union[None, _str, 'types.StringFilter']
    login_notifications: Union[_bool, 'types.BooleanFilter']
    security_alerts: Union[_bool, 'types.BooleanFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanFilter']
    analytics_consent: Union[_bool, 'types.BooleanFilter']
    marketing_emails: Union[_bool, 'types.BooleanFilter']
    theme: Union[_str, 'types.StringFilter']
    language: Union[_str, 'types.StringFilter']
    timezone: Union[_str, 'types.StringFilter']
    date_format: Union[_str, 'types.StringFilter']
    email_notifications: Union[_bool, 'types.BooleanFilter']
    push_notifications: Union[_bool, 'types.BooleanFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserSettingsWhereInputRecursive4', List['UserSettingsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserSettingsWhereInputRecursive4']
    OR: List['UserSettingsWhereInputRecursive4']
    NOT: List['UserSettingsWhereInputRecursive4']


class UserSettingsWhereInputRecursive4(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    ai_personality: Union[None, _str, 'types.StringFilter']
    voice_enabled: Union[_bool, 'types.BooleanFilter']
    preferred_voice: Union[None, _str, 'types.StringFilter']
    auto_rename_files: Union[_bool, 'types.BooleanFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[None, _str, 'types.StringFilter']
    file_client_name: Union[None, _str, 'types.StringFilter']
    file_retention_days: Union[None, _int, 'types.IntFilter']
    auto_delete_files: Union[_bool, 'types.BooleanFilter']
    max_file_size_mb: Union[_int, 'types.IntFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanFilter']
    two_factor_secret: Union[None, _str, 'types.StringFilter']
    login_notifications: Union[_bool, 'types.BooleanFilter']
    security_alerts: Union[_bool, 'types.BooleanFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanFilter']
    analytics_consent: Union[_bool, 'types.BooleanFilter']
    marketing_emails: Union[_bool, 'types.BooleanFilter']
    theme: Union[_str, 'types.StringFilter']
    language: Union[_str, 'types.StringFilter']
    timezone: Union[_str, 'types.StringFilter']
    date_format: Union[_str, 'types.StringFilter']
    email_notifications: Union[_bool, 'types.BooleanFilter']
    push_notifications: Union[_bool, 'types.BooleanFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate UserSettings types


    

class UserSettingsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    ai_personality: Union[_str, 'types.StringWithAggregatesFilter']
    voice_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    preferred_voice: Union[_str, 'types.StringWithAggregatesFilter']
    auto_rename_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[_str, 'types.StringWithAggregatesFilter']
    file_client_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_retention_days: Union[_int, 'types.IntWithAggregatesFilter']
    auto_delete_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    max_file_size_mb: Union[_int, 'types.IntWithAggregatesFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    two_factor_secret: Union[_str, 'types.StringWithAggregatesFilter']
    login_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    security_alerts: Union[_bool, 'types.BooleanWithAggregatesFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    analytics_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    marketing_emails: Union[_bool, 'types.BooleanWithAggregatesFilter']
    theme: Union[_str, 'types.StringWithAggregatesFilter']
    language: Union[_str, 'types.StringWithAggregatesFilter']
    timezone: Union[_str, 'types.StringWithAggregatesFilter']
    date_format: Union[_str, 'types.StringWithAggregatesFilter']
    email_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    push_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserSettingsScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserSettingsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserSettingsScalarWhereWithAggregatesInputRecursive1']


class UserSettingsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    ai_personality: Union[_str, 'types.StringWithAggregatesFilter']
    voice_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    preferred_voice: Union[_str, 'types.StringWithAggregatesFilter']
    auto_rename_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[_str, 'types.StringWithAggregatesFilter']
    file_client_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_retention_days: Union[_int, 'types.IntWithAggregatesFilter']
    auto_delete_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    max_file_size_mb: Union[_int, 'types.IntWithAggregatesFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    two_factor_secret: Union[_str, 'types.StringWithAggregatesFilter']
    login_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    security_alerts: Union[_bool, 'types.BooleanWithAggregatesFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    analytics_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    marketing_emails: Union[_bool, 'types.BooleanWithAggregatesFilter']
    theme: Union[_str, 'types.StringWithAggregatesFilter']
    language: Union[_str, 'types.StringWithAggregatesFilter']
    timezone: Union[_str, 'types.StringWithAggregatesFilter']
    date_format: Union[_str, 'types.StringWithAggregatesFilter']
    email_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    push_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserSettingsScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserSettingsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserSettingsScalarWhereWithAggregatesInputRecursive2']


class UserSettingsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    ai_personality: Union[_str, 'types.StringWithAggregatesFilter']
    voice_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    preferred_voice: Union[_str, 'types.StringWithAggregatesFilter']
    auto_rename_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[_str, 'types.StringWithAggregatesFilter']
    file_client_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_retention_days: Union[_int, 'types.IntWithAggregatesFilter']
    auto_delete_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    max_file_size_mb: Union[_int, 'types.IntWithAggregatesFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    two_factor_secret: Union[_str, 'types.StringWithAggregatesFilter']
    login_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    security_alerts: Union[_bool, 'types.BooleanWithAggregatesFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    analytics_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    marketing_emails: Union[_bool, 'types.BooleanWithAggregatesFilter']
    theme: Union[_str, 'types.StringWithAggregatesFilter']
    language: Union[_str, 'types.StringWithAggregatesFilter']
    timezone: Union[_str, 'types.StringWithAggregatesFilter']
    date_format: Union[_str, 'types.StringWithAggregatesFilter']
    email_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    push_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserSettingsScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserSettingsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserSettingsScalarWhereWithAggregatesInputRecursive3']


class UserSettingsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    ai_personality: Union[_str, 'types.StringWithAggregatesFilter']
    voice_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    preferred_voice: Union[_str, 'types.StringWithAggregatesFilter']
    auto_rename_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[_str, 'types.StringWithAggregatesFilter']
    file_client_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_retention_days: Union[_int, 'types.IntWithAggregatesFilter']
    auto_delete_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    max_file_size_mb: Union[_int, 'types.IntWithAggregatesFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    two_factor_secret: Union[_str, 'types.StringWithAggregatesFilter']
    login_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    security_alerts: Union[_bool, 'types.BooleanWithAggregatesFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    analytics_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    marketing_emails: Union[_bool, 'types.BooleanWithAggregatesFilter']
    theme: Union[_str, 'types.StringWithAggregatesFilter']
    language: Union[_str, 'types.StringWithAggregatesFilter']
    timezone: Union[_str, 'types.StringWithAggregatesFilter']
    date_format: Union[_str, 'types.StringWithAggregatesFilter']
    email_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    push_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserSettingsScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserSettingsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserSettingsScalarWhereWithAggregatesInputRecursive4']


class UserSettingsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    ai_personality: Union[_str, 'types.StringWithAggregatesFilter']
    voice_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    preferred_voice: Union[_str, 'types.StringWithAggregatesFilter']
    auto_rename_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: Union[_str, 'types.StringWithAggregatesFilter']
    file_client_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_retention_days: Union[_int, 'types.IntWithAggregatesFilter']
    auto_delete_files: Union[_bool, 'types.BooleanWithAggregatesFilter']
    max_file_size_mb: Union[_int, 'types.IntWithAggregatesFilter']
    two_factor_enabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    two_factor_secret: Union[_str, 'types.StringWithAggregatesFilter']
    login_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    security_alerts: Union[_bool, 'types.BooleanWithAggregatesFilter']
    data_sharing_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    analytics_consent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    marketing_emails: Union[_bool, 'types.BooleanWithAggregatesFilter']
    theme: Union[_str, 'types.StringWithAggregatesFilter']
    language: Union[_str, 'types.StringWithAggregatesFilter']
    timezone: Union[_str, 'types.StringWithAggregatesFilter']
    date_format: Union[_str, 'types.StringWithAggregatesFilter']
    email_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    push_notifications: Union[_bool, 'types.BooleanWithAggregatesFilter']
    last_settings_update: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserSettingsGroupByOutput(TypedDict, total=False):
    id: _str
    user_id: _str
    ai_personality: _str
    voice_enabled: _bool
    preferred_voice: _str
    auto_rename_files: _bool
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: _str
    file_client_name: _str
    file_retention_days: _int
    auto_delete_files: _bool
    max_file_size_mb: _int
    two_factor_enabled: _bool
    two_factor_secret: _str
    login_notifications: _bool
    security_alerts: _bool
    data_sharing_consent: _bool
    analytics_consent: _bool
    marketing_emails: _bool
    theme: _str
    language: _str
    timezone: _str
    date_format: _str
    email_notifications: _bool
    push_notifications: _bool
    last_settings_update: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'UserSettingsSumAggregateOutput'
    _avg: 'UserSettingsAvgAggregateOutput'
    _min: 'UserSettingsMinAggregateOutput'
    _max: 'UserSettingsMaxAggregateOutput'
    _count: 'UserSettingsCountAggregateOutput'


class UserSettingsAvgAggregateOutput(TypedDict, total=False):
    """UserSettings output for aggregating averages"""
    file_retention_days: float
    max_file_size_mb: float


class UserSettingsSumAggregateOutput(TypedDict, total=False):
    """UserSettings output for aggregating sums"""
    file_retention_days: _int
    max_file_size_mb: _int


class UserSettingsScalarAggregateOutput(TypedDict, total=False):
    """UserSettings output including scalar fields"""
    id: _str
    user_id: _str
    ai_personality: _str
    voice_enabled: _bool
    preferred_voice: _str
    auto_rename_files: _bool
    file_naming_format: 'enums.FileNamingFormat'
    file_naming_title: _str
    file_client_name: _str
    file_retention_days: _int
    auto_delete_files: _bool
    max_file_size_mb: _int
    two_factor_enabled: _bool
    two_factor_secret: _str
    login_notifications: _bool
    security_alerts: _bool
    data_sharing_consent: _bool
    analytics_consent: _bool
    marketing_emails: _bool
    theme: _str
    language: _str
    timezone: _str
    date_format: _str
    email_notifications: _bool
    push_notifications: _bool
    last_settings_update: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime


UserSettingsMinAggregateOutput = UserSettingsScalarAggregateOutput
UserSettingsMaxAggregateOutput = UserSettingsScalarAggregateOutput


class UserSettingsMaxAggregateInput(TypedDict, total=False):
    """UserSettings input for aggregating by max"""
    id: bool
    user_id: bool
    ai_personality: bool
    voice_enabled: bool
    preferred_voice: bool
    auto_rename_files: bool
    file_naming_format: bool
    file_naming_title: bool
    file_client_name: bool
    file_retention_days: bool
    auto_delete_files: bool
    max_file_size_mb: bool
    two_factor_enabled: bool
    two_factor_secret: bool
    login_notifications: bool
    security_alerts: bool
    data_sharing_consent: bool
    analytics_consent: bool
    marketing_emails: bool
    theme: bool
    language: bool
    timezone: bool
    date_format: bool
    email_notifications: bool
    push_notifications: bool
    last_settings_update: bool
    created_at: bool
    updated_at: bool


class UserSettingsMinAggregateInput(TypedDict, total=False):
    """UserSettings input for aggregating by min"""
    id: bool
    user_id: bool
    ai_personality: bool
    voice_enabled: bool
    preferred_voice: bool
    auto_rename_files: bool
    file_naming_format: bool
    file_naming_title: bool
    file_client_name: bool
    file_retention_days: bool
    auto_delete_files: bool
    max_file_size_mb: bool
    two_factor_enabled: bool
    two_factor_secret: bool
    login_notifications: bool
    security_alerts: bool
    data_sharing_consent: bool
    analytics_consent: bool
    marketing_emails: bool
    theme: bool
    language: bool
    timezone: bool
    date_format: bool
    email_notifications: bool
    push_notifications: bool
    last_settings_update: bool
    created_at: bool
    updated_at: bool


class UserSettingsNumberAggregateInput(TypedDict, total=False):
    """UserSettings input for aggregating numbers"""
    file_retention_days: bool
    max_file_size_mb: bool


UserSettingsAvgAggregateInput = UserSettingsNumberAggregateInput
UserSettingsSumAggregateInput = UserSettingsNumberAggregateInput


UserSettingsCountAggregateInput = TypedDict(
    'UserSettingsCountAggregateInput',
    {
        'id': bool,
        'user_id': bool,
        'ai_personality': bool,
        'voice_enabled': bool,
        'preferred_voice': bool,
        'auto_rename_files': bool,
        'file_naming_format': bool,
        'file_naming_title': bool,
        'file_client_name': bool,
        'file_retention_days': bool,
        'auto_delete_files': bool,
        'max_file_size_mb': bool,
        'two_factor_enabled': bool,
        'two_factor_secret': bool,
        'login_notifications': bool,
        'security_alerts': bool,
        'data_sharing_consent': bool,
        'analytics_consent': bool,
        'marketing_emails': bool,
        'theme': bool,
        'language': bool,
        'timezone': bool,
        'date_format': bool,
        'email_notifications': bool,
        'push_notifications': bool,
        'last_settings_update': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

UserSettingsCountAggregateOutput = TypedDict(
    'UserSettingsCountAggregateOutput',
    {
        'id': int,
        'user_id': int,
        'ai_personality': int,
        'voice_enabled': int,
        'preferred_voice': int,
        'auto_rename_files': int,
        'file_naming_format': int,
        'file_naming_title': int,
        'file_client_name': int,
        'file_retention_days': int,
        'auto_delete_files': int,
        'max_file_size_mb': int,
        'two_factor_enabled': int,
        'two_factor_secret': int,
        'login_notifications': int,
        'security_alerts': int,
        'data_sharing_consent': int,
        'analytics_consent': int,
        'marketing_emails': int,
        'theme': int,
        'language': int,
        'timezone': int,
        'date_format': int,
        'email_notifications': int,
        'push_notifications': int,
        'last_settings_update': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


UserSettingsKeys = Literal[
    'id',
    'user_id',
    'ai_personality',
    'voice_enabled',
    'preferred_voice',
    'auto_rename_files',
    'file_naming_format',
    'file_naming_title',
    'file_client_name',
    'file_retention_days',
    'auto_delete_files',
    'max_file_size_mb',
    'two_factor_enabled',
    'two_factor_secret',
    'login_notifications',
    'security_alerts',
    'data_sharing_consent',
    'analytics_consent',
    'marketing_emails',
    'theme',
    'language',
    'timezone',
    'date_format',
    'email_notifications',
    'push_notifications',
    'last_settings_update',
    'created_at',
    'updated_at',
    'user',
]
UserSettingsScalarFieldKeys = Literal[
    'id',
    'user_id',
    'ai_personality',
    'voice_enabled',
    'preferred_voice',
    'auto_rename_files',
    'file_naming_format',
    'file_naming_title',
    'file_client_name',
    'file_retention_days',
    'auto_delete_files',
    'max_file_size_mb',
    'two_factor_enabled',
    'two_factor_secret',
    'login_notifications',
    'security_alerts',
    'data_sharing_consent',
    'analytics_consent',
    'marketing_emails',
    'theme',
    'language',
    'timezone',
    'date_format',
    'email_notifications',
    'push_notifications',
    'last_settings_update',
    'created_at',
    'updated_at',
]
UserSettingsScalarFieldKeysT = TypeVar('UserSettingsScalarFieldKeysT', bound=UserSettingsScalarFieldKeys)

UserSettingsRelationalFieldKeys = Literal[
        'user',
    ]

# Document types

class DocumentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Document create method"""
    id: _str
    s3_key: Optional[_str]
    s3_bucket: Optional[_str]
    status: 'enums.DocumentStatus'
    page_count: Optional[_int]
    processing_started_at: Optional[datetime.datetime]
    processing_completed_at: Optional[datetime.datetime]
    s3_uploaded_at: Optional[datetime.datetime]
    owner_id: _str
    uploaded_at: datetime.datetime
    updated_at: datetime.datetime
    owner: 'UserCreateNestedWithoutRelationsInput'
    chat_sessions: 'ChatSessionCreateManyNestedWithoutRelationsInput'


class DocumentCreateInput(DocumentOptionalCreateInput):
    """Required arguments to the Document create method"""
    file_name: _str
    original_file_name: _str
    file_path: _str
    file_size: _int
    mime_type: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DocumentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Document create method, without relations"""
    id: _str
    s3_key: Optional[_str]
    s3_bucket: Optional[_str]
    status: 'enums.DocumentStatus'
    page_count: Optional[_int]
    processing_started_at: Optional[datetime.datetime]
    processing_completed_at: Optional[datetime.datetime]
    s3_uploaded_at: Optional[datetime.datetime]
    owner_id: _str
    uploaded_at: datetime.datetime
    updated_at: datetime.datetime


class DocumentCreateWithoutRelationsInput(DocumentOptionalCreateWithoutRelationsInput):
    """Required arguments to the Document create method, without relations"""
    file_name: _str
    original_file_name: _str
    file_path: _str
    file_size: _int
    mime_type: _str

class DocumentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DocumentCreateWithoutRelationsInput'
    where: 'DocumentWhereUniqueInput'

class DocumentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DocumentCreateWithoutRelationsInput'
    connect: 'DocumentWhereUniqueInput'
    connect_or_create: 'DocumentConnectOrCreateWithoutRelationsInput'


class DocumentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DocumentCreateWithoutRelationsInput', List['DocumentCreateWithoutRelationsInput']]
    connect: Union['DocumentWhereUniqueInput', List['DocumentWhereUniqueInput']]
    connect_or_create: Union['DocumentConnectOrCreateWithoutRelationsInput', List['DocumentConnectOrCreateWithoutRelationsInput']]

_DocumentWhereUnique_id_Input = TypedDict(
    '_DocumentWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

DocumentWhereUniqueInput = _DocumentWhereUnique_id_Input


class DocumentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    file_name: _str
    original_file_name: _str
    file_path: _str
    s3_key: Optional[_str]
    s3_bucket: Optional[_str]
    file_size: Union[AtomicIntInput, _int]
    mime_type: _str
    status: 'enums.DocumentStatus'
    page_count: Optional[Union[AtomicIntInput, _int]]
    processing_started_at: Optional[datetime.datetime]
    processing_completed_at: Optional[datetime.datetime]
    s3_uploaded_at: Optional[datetime.datetime]
    uploaded_at: datetime.datetime
    updated_at: datetime.datetime
    owner: 'UserUpdateOneWithoutRelationsInput'
    chat_sessions: 'ChatSessionUpdateManyWithoutRelationsInput'


class DocumentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    file_name: _str
    original_file_name: _str
    file_path: _str
    s3_key: Optional[_str]
    s3_bucket: Optional[_str]
    file_size: Union[AtomicIntInput, _int]
    mime_type: _str
    status: 'enums.DocumentStatus'
    page_count: Optional[Union[AtomicIntInput, _int]]
    processing_started_at: Optional[datetime.datetime]
    processing_completed_at: Optional[datetime.datetime]
    s3_uploaded_at: Optional[datetime.datetime]
    uploaded_at: datetime.datetime
    updated_at: datetime.datetime


class DocumentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DocumentCreateWithoutRelationsInput']
    connect: List['DocumentWhereUniqueInput']
    connect_or_create: List['DocumentConnectOrCreateWithoutRelationsInput']
    set: List['DocumentWhereUniqueInput']
    disconnect: List['DocumentWhereUniqueInput']
    delete: List['DocumentWhereUniqueInput']

    # TODO
    # update: List['DocumentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DocumentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DocumentScalarWhereInput']
    # upsert: List['DocumentUpserteWithWhereUniqueWithoutRelationsInput']


class DocumentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DocumentCreateWithoutRelationsInput'
    connect: 'DocumentWhereUniqueInput'
    connect_or_create: 'DocumentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DocumentUpdateInput'
    # upsert: 'DocumentUpsertWithoutRelationsInput'


class DocumentUpsertInput(TypedDict):
    create: 'DocumentCreateInput'
    update: 'DocumentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Document_id_OrderByInput = TypedDict(
    '_Document_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Document_file_name_OrderByInput = TypedDict(
    '_Document_file_name_OrderByInput',
    {
        'file_name': 'SortOrder',
    },
    total=True
)

_Document_original_file_name_OrderByInput = TypedDict(
    '_Document_original_file_name_OrderByInput',
    {
        'original_file_name': 'SortOrder',
    },
    total=True
)

_Document_file_path_OrderByInput = TypedDict(
    '_Document_file_path_OrderByInput',
    {
        'file_path': 'SortOrder',
    },
    total=True
)

_Document_s3_key_OrderByInput = TypedDict(
    '_Document_s3_key_OrderByInput',
    {
        's3_key': 'SortOrder',
    },
    total=True
)

_Document_s3_bucket_OrderByInput = TypedDict(
    '_Document_s3_bucket_OrderByInput',
    {
        's3_bucket': 'SortOrder',
    },
    total=True
)

_Document_file_size_OrderByInput = TypedDict(
    '_Document_file_size_OrderByInput',
    {
        'file_size': 'SortOrder',
    },
    total=True
)

_Document_mime_type_OrderByInput = TypedDict(
    '_Document_mime_type_OrderByInput',
    {
        'mime_type': 'SortOrder',
    },
    total=True
)

_Document_status_OrderByInput = TypedDict(
    '_Document_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Document_page_count_OrderByInput = TypedDict(
    '_Document_page_count_OrderByInput',
    {
        'page_count': 'SortOrder',
    },
    total=True
)

_Document_processing_started_at_OrderByInput = TypedDict(
    '_Document_processing_started_at_OrderByInput',
    {
        'processing_started_at': 'SortOrder',
    },
    total=True
)

_Document_processing_completed_at_OrderByInput = TypedDict(
    '_Document_processing_completed_at_OrderByInput',
    {
        'processing_completed_at': 'SortOrder',
    },
    total=True
)

_Document_s3_uploaded_at_OrderByInput = TypedDict(
    '_Document_s3_uploaded_at_OrderByInput',
    {
        's3_uploaded_at': 'SortOrder',
    },
    total=True
)

_Document_owner_id_OrderByInput = TypedDict(
    '_Document_owner_id_OrderByInput',
    {
        'owner_id': 'SortOrder',
    },
    total=True
)

_Document_uploaded_at_OrderByInput = TypedDict(
    '_Document_uploaded_at_OrderByInput',
    {
        'uploaded_at': 'SortOrder',
    },
    total=True
)

_Document_updated_at_OrderByInput = TypedDict(
    '_Document_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Document_RelevanceInner = TypedDict(
    '_Document_RelevanceInner',
    {
        'fields': 'List[DocumentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Document_RelevanceOrderByInput = TypedDict(
    '_Document_RelevanceOrderByInput',
    {
        '_relevance': '_Document_RelevanceInner',
    },
    total=True
)

DocumentOrderByInput = Union[
    '_Document_id_OrderByInput',
    '_Document_file_name_OrderByInput',
    '_Document_original_file_name_OrderByInput',
    '_Document_file_path_OrderByInput',
    '_Document_s3_key_OrderByInput',
    '_Document_s3_bucket_OrderByInput',
    '_Document_file_size_OrderByInput',
    '_Document_mime_type_OrderByInput',
    '_Document_status_OrderByInput',
    '_Document_page_count_OrderByInput',
    '_Document_processing_started_at_OrderByInput',
    '_Document_processing_completed_at_OrderByInput',
    '_Document_s3_uploaded_at_OrderByInput',
    '_Document_owner_id_OrderByInput',
    '_Document_uploaded_at_OrderByInput',
    '_Document_updated_at_OrderByInput',
    '_Document_RelevanceOrderByInput',
]



# recursive Document types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DocumentRelationFilter = TypedDict(
    'DocumentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DocumentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DocumentInclude(TypedDict, total=False):
    """Document relational arguments"""
    owner: Union[bool, 'UserArgsFromDocument']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocument']


    

class UserIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    documents: Union[bool, 'FindManyDocumentArgsFromDocumentRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocumentRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromDocumentRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromDocumentRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromDocumentRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromDocumentRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromDocumentRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromDocumentRecursive1']


class UserIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    documents: Union[bool, 'FindManyDocumentArgsFromDocumentRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocumentRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromDocumentRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromDocumentRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromDocumentRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromDocumentRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromDocumentRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromDocumentRecursive2']


class UserIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    documents: Union[bool, 'FindManyDocumentArgsFromDocumentRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocumentRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromDocumentRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromDocumentRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromDocumentRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromDocumentRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromDocumentRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromDocumentRecursive3']


class UserIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    documents: Union[bool, 'FindManyDocumentArgsFromDocumentRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocumentRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromDocumentRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromDocumentRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromDocumentRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromDocumentRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromDocumentRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromDocumentRecursive4']


class UserIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class UserArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManyUserArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive1']


class SubscriptionIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive2']


class SubscriptionIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive3']


class SubscriptionIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive4']


class SubscriptionIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class SubscriptionArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManySubscriptionArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive1']


class UserSettingsIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive2']


class UserSettingsIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive3']


class UserSettingsIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive4']


class UserSettingsIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class UserSettingsArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManyUserSettingsArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    owner: Union[bool, 'UserArgsFromDocumentRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocumentRecursive1']


class DocumentIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    owner: Union[bool, 'UserArgsFromDocumentRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocumentRecursive2']


class DocumentIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    owner: Union[bool, 'UserArgsFromDocumentRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocumentRecursive3']


class DocumentIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    owner: Union[bool, 'UserArgsFromDocumentRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromDocumentRecursive4']


class DocumentIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class DocumentArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManyDocumentArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive1']
    document: Union[bool, 'DocumentArgsFromDocumentRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromDocumentRecursive1']


class ChatSessionIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive2']
    document: Union[bool, 'DocumentArgsFromDocumentRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromDocumentRecursive2']


class ChatSessionIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive3']
    document: Union[bool, 'DocumentArgsFromDocumentRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromDocumentRecursive3']


class ChatSessionIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive4']
    document: Union[bool, 'DocumentArgsFromDocumentRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromDocumentRecursive4']


class ChatSessionIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class ChatSessionArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManyChatSessionArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    session: Union[bool, 'ChatSessionArgsFromDocumentRecursive1']


class ChatMessageIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    session: Union[bool, 'ChatSessionArgsFromDocumentRecursive2']


class ChatMessageIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    session: Union[bool, 'ChatSessionArgsFromDocumentRecursive3']


class ChatMessageIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    session: Union[bool, 'ChatSessionArgsFromDocumentRecursive4']


class ChatMessageIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class ChatMessageArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManyChatMessageArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive1']


class SecurityLogIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive2']


class SecurityLogIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive3']


class SecurityLogIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive4']


class SecurityLogIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class SecurityLogArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManySecurityLogArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive1']


class VerificationTokenIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive2']


class VerificationTokenIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive3']


class VerificationTokenIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive4']


class VerificationTokenIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class VerificationTokenArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManyVerificationTokenArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive1']


class AccountIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive2']


class AccountIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive3']


class AccountIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive4']


class AccountIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class AccountArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManyAccountArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromDocument(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive1']


class SessionIncludeFromDocumentRecursive1(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive2']


class SessionIncludeFromDocumentRecursive2(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive3']


class SessionIncludeFromDocumentRecursive3(TypedDict, total=False):
    """Relational arguments for Document"""
    user: Union[bool, 'UserArgsFromDocumentRecursive4']


class SessionIncludeFromDocumentRecursive4(TypedDict, total=False):
    """Relational arguments for Document"""

    

class SessionArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    
    

class FindManySessionArgsFromDocument(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromDocumentRecursive1(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromDocumentRecursive2(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromDocumentRecursive3(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromDocumentRecursive4(TypedDict, total=False):
    """Arguments for Document"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManyDocumentArgs = FindManyDocumentArgsFromDocument
FindFirstDocumentArgs = FindManyDocumentArgsFromDocument


    

class DocumentWhereInput(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    file_name: Union[_str, 'types.StringFilter']
    original_file_name: Union[_str, 'types.StringFilter']
    file_path: Union[_str, 'types.StringFilter']
    s3_key: Union[None, _str, 'types.StringFilter']
    s3_bucket: Union[None, _str, 'types.StringFilter']
    file_size: Union[_int, 'types.IntFilter']
    mime_type: Union[_str, 'types.StringFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[None, _int, 'types.IntFilter']
    processing_started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processing_completed_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    s3_uploaded_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    owner_id: Union[_str, 'types.StringFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    owner: 'UserRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'

    # should be noted that AND and NOT should be Union['DocumentWhereInputRecursive1', List['DocumentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DocumentWhereInputRecursive1']
    OR: List['DocumentWhereInputRecursive1']
    NOT: List['DocumentWhereInputRecursive1']


class DocumentWhereInputRecursive1(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    file_name: Union[_str, 'types.StringFilter']
    original_file_name: Union[_str, 'types.StringFilter']
    file_path: Union[_str, 'types.StringFilter']
    s3_key: Union[None, _str, 'types.StringFilter']
    s3_bucket: Union[None, _str, 'types.StringFilter']
    file_size: Union[_int, 'types.IntFilter']
    mime_type: Union[_str, 'types.StringFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[None, _int, 'types.IntFilter']
    processing_started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processing_completed_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    s3_uploaded_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    owner_id: Union[_str, 'types.StringFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    owner: 'UserRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'

    # should be noted that AND and NOT should be Union['DocumentWhereInputRecursive2', List['DocumentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DocumentWhereInputRecursive2']
    OR: List['DocumentWhereInputRecursive2']
    NOT: List['DocumentWhereInputRecursive2']


class DocumentWhereInputRecursive2(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    file_name: Union[_str, 'types.StringFilter']
    original_file_name: Union[_str, 'types.StringFilter']
    file_path: Union[_str, 'types.StringFilter']
    s3_key: Union[None, _str, 'types.StringFilter']
    s3_bucket: Union[None, _str, 'types.StringFilter']
    file_size: Union[_int, 'types.IntFilter']
    mime_type: Union[_str, 'types.StringFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[None, _int, 'types.IntFilter']
    processing_started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processing_completed_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    s3_uploaded_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    owner_id: Union[_str, 'types.StringFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    owner: 'UserRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'

    # should be noted that AND and NOT should be Union['DocumentWhereInputRecursive3', List['DocumentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DocumentWhereInputRecursive3']
    OR: List['DocumentWhereInputRecursive3']
    NOT: List['DocumentWhereInputRecursive3']


class DocumentWhereInputRecursive3(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    file_name: Union[_str, 'types.StringFilter']
    original_file_name: Union[_str, 'types.StringFilter']
    file_path: Union[_str, 'types.StringFilter']
    s3_key: Union[None, _str, 'types.StringFilter']
    s3_bucket: Union[None, _str, 'types.StringFilter']
    file_size: Union[_int, 'types.IntFilter']
    mime_type: Union[_str, 'types.StringFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[None, _int, 'types.IntFilter']
    processing_started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processing_completed_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    s3_uploaded_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    owner_id: Union[_str, 'types.StringFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    owner: 'UserRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'

    # should be noted that AND and NOT should be Union['DocumentWhereInputRecursive4', List['DocumentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DocumentWhereInputRecursive4']
    OR: List['DocumentWhereInputRecursive4']
    NOT: List['DocumentWhereInputRecursive4']


class DocumentWhereInputRecursive4(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    file_name: Union[_str, 'types.StringFilter']
    original_file_name: Union[_str, 'types.StringFilter']
    file_path: Union[_str, 'types.StringFilter']
    s3_key: Union[None, _str, 'types.StringFilter']
    s3_bucket: Union[None, _str, 'types.StringFilter']
    file_size: Union[_int, 'types.IntFilter']
    mime_type: Union[_str, 'types.StringFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[None, _int, 'types.IntFilter']
    processing_started_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    processing_completed_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    s3_uploaded_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    owner_id: Union[_str, 'types.StringFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    owner: 'UserRelationFilter'
    chat_sessions: 'ChatSessionListRelationFilter'



# aggregate Document types


    

class DocumentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    file_name: Union[_str, 'types.StringWithAggregatesFilter']
    original_file_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_path: Union[_str, 'types.StringWithAggregatesFilter']
    s3_key: Union[_str, 'types.StringWithAggregatesFilter']
    s3_bucket: Union[_str, 'types.StringWithAggregatesFilter']
    file_size: Union[_int, 'types.IntWithAggregatesFilter']
    mime_type: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[_int, 'types.IntWithAggregatesFilter']
    processing_started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processing_completed_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    s3_uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    owner_id: Union[_str, 'types.StringWithAggregatesFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DocumentScalarWhereWithAggregatesInputRecursive1']
    OR: List['DocumentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DocumentScalarWhereWithAggregatesInputRecursive1']


class DocumentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    file_name: Union[_str, 'types.StringWithAggregatesFilter']
    original_file_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_path: Union[_str, 'types.StringWithAggregatesFilter']
    s3_key: Union[_str, 'types.StringWithAggregatesFilter']
    s3_bucket: Union[_str, 'types.StringWithAggregatesFilter']
    file_size: Union[_int, 'types.IntWithAggregatesFilter']
    mime_type: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[_int, 'types.IntWithAggregatesFilter']
    processing_started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processing_completed_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    s3_uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    owner_id: Union[_str, 'types.StringWithAggregatesFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DocumentScalarWhereWithAggregatesInputRecursive2']
    OR: List['DocumentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DocumentScalarWhereWithAggregatesInputRecursive2']


class DocumentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    file_name: Union[_str, 'types.StringWithAggregatesFilter']
    original_file_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_path: Union[_str, 'types.StringWithAggregatesFilter']
    s3_key: Union[_str, 'types.StringWithAggregatesFilter']
    s3_bucket: Union[_str, 'types.StringWithAggregatesFilter']
    file_size: Union[_int, 'types.IntWithAggregatesFilter']
    mime_type: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[_int, 'types.IntWithAggregatesFilter']
    processing_started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processing_completed_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    s3_uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    owner_id: Union[_str, 'types.StringWithAggregatesFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DocumentScalarWhereWithAggregatesInputRecursive3']
    OR: List['DocumentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DocumentScalarWhereWithAggregatesInputRecursive3']


class DocumentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    file_name: Union[_str, 'types.StringWithAggregatesFilter']
    original_file_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_path: Union[_str, 'types.StringWithAggregatesFilter']
    s3_key: Union[_str, 'types.StringWithAggregatesFilter']
    s3_bucket: Union[_str, 'types.StringWithAggregatesFilter']
    file_size: Union[_int, 'types.IntWithAggregatesFilter']
    mime_type: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[_int, 'types.IntWithAggregatesFilter']
    processing_started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processing_completed_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    s3_uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    owner_id: Union[_str, 'types.StringWithAggregatesFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DocumentScalarWhereWithAggregatesInputRecursive4']
    OR: List['DocumentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DocumentScalarWhereWithAggregatesInputRecursive4']


class DocumentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Document arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    file_name: Union[_str, 'types.StringWithAggregatesFilter']
    original_file_name: Union[_str, 'types.StringWithAggregatesFilter']
    file_path: Union[_str, 'types.StringWithAggregatesFilter']
    s3_key: Union[_str, 'types.StringWithAggregatesFilter']
    s3_bucket: Union[_str, 'types.StringWithAggregatesFilter']
    file_size: Union[_int, 'types.IntWithAggregatesFilter']
    mime_type: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.DocumentStatus'
    page_count: Union[_int, 'types.IntWithAggregatesFilter']
    processing_started_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    processing_completed_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    s3_uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    owner_id: Union[_str, 'types.StringWithAggregatesFilter']
    uploaded_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class DocumentGroupByOutput(TypedDict, total=False):
    id: _str
    file_name: _str
    original_file_name: _str
    file_path: _str
    s3_key: _str
    s3_bucket: _str
    file_size: _int
    mime_type: _str
    status: 'enums.DocumentStatus'
    page_count: _int
    processing_started_at: datetime.datetime
    processing_completed_at: datetime.datetime
    s3_uploaded_at: datetime.datetime
    owner_id: _str
    uploaded_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'DocumentSumAggregateOutput'
    _avg: 'DocumentAvgAggregateOutput'
    _min: 'DocumentMinAggregateOutput'
    _max: 'DocumentMaxAggregateOutput'
    _count: 'DocumentCountAggregateOutput'


class DocumentAvgAggregateOutput(TypedDict, total=False):
    """Document output for aggregating averages"""
    file_size: float
    page_count: float


class DocumentSumAggregateOutput(TypedDict, total=False):
    """Document output for aggregating sums"""
    file_size: _int
    page_count: _int


class DocumentScalarAggregateOutput(TypedDict, total=False):
    """Document output including scalar fields"""
    id: _str
    file_name: _str
    original_file_name: _str
    file_path: _str
    s3_key: _str
    s3_bucket: _str
    file_size: _int
    mime_type: _str
    status: 'enums.DocumentStatus'
    page_count: _int
    processing_started_at: datetime.datetime
    processing_completed_at: datetime.datetime
    s3_uploaded_at: datetime.datetime
    owner_id: _str
    uploaded_at: datetime.datetime
    updated_at: datetime.datetime


DocumentMinAggregateOutput = DocumentScalarAggregateOutput
DocumentMaxAggregateOutput = DocumentScalarAggregateOutput


class DocumentMaxAggregateInput(TypedDict, total=False):
    """Document input for aggregating by max"""
    id: bool
    file_name: bool
    original_file_name: bool
    file_path: bool
    s3_key: bool
    s3_bucket: bool
    file_size: bool
    mime_type: bool
    status: bool
    page_count: bool
    processing_started_at: bool
    processing_completed_at: bool
    s3_uploaded_at: bool
    owner_id: bool
    uploaded_at: bool
    updated_at: bool


class DocumentMinAggregateInput(TypedDict, total=False):
    """Document input for aggregating by min"""
    id: bool
    file_name: bool
    original_file_name: bool
    file_path: bool
    s3_key: bool
    s3_bucket: bool
    file_size: bool
    mime_type: bool
    status: bool
    page_count: bool
    processing_started_at: bool
    processing_completed_at: bool
    s3_uploaded_at: bool
    owner_id: bool
    uploaded_at: bool
    updated_at: bool


class DocumentNumberAggregateInput(TypedDict, total=False):
    """Document input for aggregating numbers"""
    file_size: bool
    page_count: bool


DocumentAvgAggregateInput = DocumentNumberAggregateInput
DocumentSumAggregateInput = DocumentNumberAggregateInput


DocumentCountAggregateInput = TypedDict(
    'DocumentCountAggregateInput',
    {
        'id': bool,
        'file_name': bool,
        'original_file_name': bool,
        'file_path': bool,
        's3_key': bool,
        's3_bucket': bool,
        'file_size': bool,
        'mime_type': bool,
        'status': bool,
        'page_count': bool,
        'processing_started_at': bool,
        'processing_completed_at': bool,
        's3_uploaded_at': bool,
        'owner_id': bool,
        'uploaded_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

DocumentCountAggregateOutput = TypedDict(
    'DocumentCountAggregateOutput',
    {
        'id': int,
        'file_name': int,
        'original_file_name': int,
        'file_path': int,
        's3_key': int,
        's3_bucket': int,
        'file_size': int,
        'mime_type': int,
        'status': int,
        'page_count': int,
        'processing_started_at': int,
        'processing_completed_at': int,
        's3_uploaded_at': int,
        'owner_id': int,
        'uploaded_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


DocumentKeys = Literal[
    'id',
    'file_name',
    'original_file_name',
    'file_path',
    's3_key',
    's3_bucket',
    'file_size',
    'mime_type',
    'status',
    'page_count',
    'processing_started_at',
    'processing_completed_at',
    's3_uploaded_at',
    'owner_id',
    'uploaded_at',
    'updated_at',
    'owner',
    'chat_sessions',
]
DocumentScalarFieldKeys = Literal[
    'id',
    'file_name',
    'original_file_name',
    'file_path',
    's3_key',
    's3_bucket',
    'file_size',
    'mime_type',
    'status',
    'page_count',
    'processing_started_at',
    'processing_completed_at',
    's3_uploaded_at',
    'owner_id',
    'uploaded_at',
    'updated_at',
]
DocumentScalarFieldKeysT = TypeVar('DocumentScalarFieldKeysT', bound=DocumentScalarFieldKeys)

DocumentRelationalFieldKeys = Literal[
        'owner',
        'chat_sessions',
    ]

# ChatSession types

class ChatSessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ChatSession create method"""
    id: _str
    title: Optional[_str]
    user_id: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    document_id: _str
    document: 'DocumentCreateNestedWithoutRelationsInput'
    is_saved: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    messages: 'ChatMessageCreateManyNestedWithoutRelationsInput'


class ChatSessionCreateInput(ChatSessionOptionalCreateInput):
    """Required arguments to the ChatSession create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ChatSessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ChatSession create method, without relations"""
    id: _str
    title: Optional[_str]
    user_id: _str
    document_id: _str
    is_saved: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime


class ChatSessionCreateWithoutRelationsInput(ChatSessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the ChatSession create method, without relations"""

class ChatSessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ChatSessionCreateWithoutRelationsInput'
    where: 'ChatSessionWhereUniqueInput'

class ChatSessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ChatSessionCreateWithoutRelationsInput'
    connect: 'ChatSessionWhereUniqueInput'
    connect_or_create: 'ChatSessionConnectOrCreateWithoutRelationsInput'


class ChatSessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ChatSessionCreateWithoutRelationsInput', List['ChatSessionCreateWithoutRelationsInput']]
    connect: Union['ChatSessionWhereUniqueInput', List['ChatSessionWhereUniqueInput']]
    connect_or_create: Union['ChatSessionConnectOrCreateWithoutRelationsInput', List['ChatSessionConnectOrCreateWithoutRelationsInput']]

_ChatSessionWhereUnique_id_Input = TypedDict(
    '_ChatSessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ChatSessionWhereUniqueInput = _ChatSessionWhereUnique_id_Input


class ChatSessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: Optional[_str]
    user: 'UserUpdateOneWithoutRelationsInput'
    document: 'DocumentUpdateOneWithoutRelationsInput'
    is_saved: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    messages: 'ChatMessageUpdateManyWithoutRelationsInput'


class ChatSessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: Optional[_str]
    is_saved: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime


class ChatSessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ChatSessionCreateWithoutRelationsInput']
    connect: List['ChatSessionWhereUniqueInput']
    connect_or_create: List['ChatSessionConnectOrCreateWithoutRelationsInput']
    set: List['ChatSessionWhereUniqueInput']
    disconnect: List['ChatSessionWhereUniqueInput']
    delete: List['ChatSessionWhereUniqueInput']

    # TODO
    # update: List['ChatSessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ChatSessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ChatSessionScalarWhereInput']
    # upsert: List['ChatSessionUpserteWithWhereUniqueWithoutRelationsInput']


class ChatSessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ChatSessionCreateWithoutRelationsInput'
    connect: 'ChatSessionWhereUniqueInput'
    connect_or_create: 'ChatSessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ChatSessionUpdateInput'
    # upsert: 'ChatSessionUpsertWithoutRelationsInput'


class ChatSessionUpsertInput(TypedDict):
    create: 'ChatSessionCreateInput'
    update: 'ChatSessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ChatSession_id_OrderByInput = TypedDict(
    '_ChatSession_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ChatSession_title_OrderByInput = TypedDict(
    '_ChatSession_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_ChatSession_user_id_OrderByInput = TypedDict(
    '_ChatSession_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_ChatSession_document_id_OrderByInput = TypedDict(
    '_ChatSession_document_id_OrderByInput',
    {
        'document_id': 'SortOrder',
    },
    total=True
)

_ChatSession_is_saved_OrderByInput = TypedDict(
    '_ChatSession_is_saved_OrderByInput',
    {
        'is_saved': 'SortOrder',
    },
    total=True
)

_ChatSession_created_at_OrderByInput = TypedDict(
    '_ChatSession_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_ChatSession_updated_at_OrderByInput = TypedDict(
    '_ChatSession_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_ChatSession_RelevanceInner = TypedDict(
    '_ChatSession_RelevanceInner',
    {
        'fields': 'List[ChatSessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ChatSession_RelevanceOrderByInput = TypedDict(
    '_ChatSession_RelevanceOrderByInput',
    {
        '_relevance': '_ChatSession_RelevanceInner',
    },
    total=True
)

ChatSessionOrderByInput = Union[
    '_ChatSession_id_OrderByInput',
    '_ChatSession_title_OrderByInput',
    '_ChatSession_user_id_OrderByInput',
    '_ChatSession_document_id_OrderByInput',
    '_ChatSession_is_saved_OrderByInput',
    '_ChatSession_created_at_OrderByInput',
    '_ChatSession_updated_at_OrderByInput',
    '_ChatSession_RelevanceOrderByInput',
]



# recursive ChatSession types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ChatSessionRelationFilter = TypedDict(
    'ChatSessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ChatSessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ChatSessionInclude(TypedDict, total=False):
    """ChatSession relational arguments"""
    user: Union[bool, 'UserArgsFromChatSession']
    document: Union[bool, 'DocumentArgsFromChatSession']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatSession']


    

class UserIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    documents: Union[bool, 'FindManyDocumentArgsFromChatSessionRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatSessionRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromChatSessionRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromChatSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromChatSessionRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromChatSessionRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromChatSessionRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromChatSessionRecursive1']


class UserIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    documents: Union[bool, 'FindManyDocumentArgsFromChatSessionRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatSessionRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromChatSessionRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromChatSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromChatSessionRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromChatSessionRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromChatSessionRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromChatSessionRecursive2']


class UserIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    documents: Union[bool, 'FindManyDocumentArgsFromChatSessionRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatSessionRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromChatSessionRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromChatSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromChatSessionRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromChatSessionRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromChatSessionRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromChatSessionRecursive3']


class UserIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    documents: Union[bool, 'FindManyDocumentArgsFromChatSessionRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatSessionRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromChatSessionRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromChatSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromChatSessionRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromChatSessionRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromChatSessionRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromChatSessionRecursive4']


class UserIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class UserArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManyUserArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive1']


class SubscriptionIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive2']


class SubscriptionIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive3']


class SubscriptionIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive4']


class SubscriptionIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class SubscriptionArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManySubscriptionArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive1']


class UserSettingsIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive2']


class UserSettingsIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive3']


class UserSettingsIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive4']


class UserSettingsIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class UserSettingsArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManyUserSettingsArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    owner: Union[bool, 'UserArgsFromChatSessionRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatSessionRecursive1']


class DocumentIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    owner: Union[bool, 'UserArgsFromChatSessionRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatSessionRecursive2']


class DocumentIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    owner: Union[bool, 'UserArgsFromChatSessionRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatSessionRecursive3']


class DocumentIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    owner: Union[bool, 'UserArgsFromChatSessionRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatSessionRecursive4']


class DocumentIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class DocumentArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManyDocumentArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive1']
    document: Union[bool, 'DocumentArgsFromChatSessionRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatSessionRecursive1']


class ChatSessionIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive2']
    document: Union[bool, 'DocumentArgsFromChatSessionRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatSessionRecursive2']


class ChatSessionIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive3']
    document: Union[bool, 'DocumentArgsFromChatSessionRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatSessionRecursive3']


class ChatSessionIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive4']
    document: Union[bool, 'DocumentArgsFromChatSessionRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatSessionRecursive4']


class ChatSessionIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class ChatSessionArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManyChatSessionArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    session: Union[bool, 'ChatSessionArgsFromChatSessionRecursive1']


class ChatMessageIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    session: Union[bool, 'ChatSessionArgsFromChatSessionRecursive2']


class ChatMessageIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    session: Union[bool, 'ChatSessionArgsFromChatSessionRecursive3']


class ChatMessageIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    session: Union[bool, 'ChatSessionArgsFromChatSessionRecursive4']


class ChatMessageIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class ChatMessageArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManyChatMessageArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive1']


class SecurityLogIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive2']


class SecurityLogIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive3']


class SecurityLogIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive4']


class SecurityLogIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class SecurityLogArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManySecurityLogArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive1']


class VerificationTokenIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive2']


class VerificationTokenIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive3']


class VerificationTokenIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive4']


class VerificationTokenIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class VerificationTokenArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManyVerificationTokenArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive1']


class AccountIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive2']


class AccountIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive3']


class AccountIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive4']


class AccountIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class AccountArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManyAccountArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromChatSession(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive1']


class SessionIncludeFromChatSessionRecursive1(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive2']


class SessionIncludeFromChatSessionRecursive2(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive3']


class SessionIncludeFromChatSessionRecursive3(TypedDict, total=False):
    """Relational arguments for ChatSession"""
    user: Union[bool, 'UserArgsFromChatSessionRecursive4']


class SessionIncludeFromChatSessionRecursive4(TypedDict, total=False):
    """Relational arguments for ChatSession"""

    

class SessionArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    
    

class FindManySessionArgsFromChatSession(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromChatSessionRecursive1(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromChatSessionRecursive2(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromChatSessionRecursive3(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromChatSessionRecursive4(TypedDict, total=False):
    """Arguments for ChatSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManyChatSessionArgs = FindManyChatSessionArgsFromChatSession
FindFirstChatSessionArgs = FindManyChatSessionArgsFromChatSession


    

class ChatSessionWhereInput(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    document_id: Union[_str, 'types.StringFilter']
    document: 'DocumentRelationFilter'
    is_saved: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'ChatMessageListRelationFilter'

    # should be noted that AND and NOT should be Union['ChatSessionWhereInputRecursive1', List['ChatSessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ChatSessionWhereInputRecursive1']
    OR: List['ChatSessionWhereInputRecursive1']
    NOT: List['ChatSessionWhereInputRecursive1']


class ChatSessionWhereInputRecursive1(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    document_id: Union[_str, 'types.StringFilter']
    document: 'DocumentRelationFilter'
    is_saved: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'ChatMessageListRelationFilter'

    # should be noted that AND and NOT should be Union['ChatSessionWhereInputRecursive2', List['ChatSessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ChatSessionWhereInputRecursive2']
    OR: List['ChatSessionWhereInputRecursive2']
    NOT: List['ChatSessionWhereInputRecursive2']


class ChatSessionWhereInputRecursive2(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    document_id: Union[_str, 'types.StringFilter']
    document: 'DocumentRelationFilter'
    is_saved: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'ChatMessageListRelationFilter'

    # should be noted that AND and NOT should be Union['ChatSessionWhereInputRecursive3', List['ChatSessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ChatSessionWhereInputRecursive3']
    OR: List['ChatSessionWhereInputRecursive3']
    NOT: List['ChatSessionWhereInputRecursive3']


class ChatSessionWhereInputRecursive3(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    document_id: Union[_str, 'types.StringFilter']
    document: 'DocumentRelationFilter'
    is_saved: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'ChatMessageListRelationFilter'

    # should be noted that AND and NOT should be Union['ChatSessionWhereInputRecursive4', List['ChatSessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ChatSessionWhereInputRecursive4']
    OR: List['ChatSessionWhereInputRecursive4']
    NOT: List['ChatSessionWhereInputRecursive4']


class ChatSessionWhereInputRecursive4(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    document_id: Union[_str, 'types.StringFilter']
    document: 'DocumentRelationFilter'
    is_saved: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'ChatMessageListRelationFilter'



# aggregate ChatSession types


    

class ChatSessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    document_id: Union[_str, 'types.StringWithAggregatesFilter']
    is_saved: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatSessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['ChatSessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ChatSessionScalarWhereWithAggregatesInputRecursive1']


class ChatSessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    document_id: Union[_str, 'types.StringWithAggregatesFilter']
    is_saved: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatSessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['ChatSessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ChatSessionScalarWhereWithAggregatesInputRecursive2']


class ChatSessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    document_id: Union[_str, 'types.StringWithAggregatesFilter']
    is_saved: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatSessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['ChatSessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ChatSessionScalarWhereWithAggregatesInputRecursive3']


class ChatSessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    document_id: Union[_str, 'types.StringWithAggregatesFilter']
    is_saved: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatSessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['ChatSessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ChatSessionScalarWhereWithAggregatesInputRecursive4']


class ChatSessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ChatSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    document_id: Union[_str, 'types.StringWithAggregatesFilter']
    is_saved: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ChatSessionGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    user_id: _str
    document_id: _str
    is_saved: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'ChatSessionSumAggregateOutput'
    _avg: 'ChatSessionAvgAggregateOutput'
    _min: 'ChatSessionMinAggregateOutput'
    _max: 'ChatSessionMaxAggregateOutput'
    _count: 'ChatSessionCountAggregateOutput'


class ChatSessionAvgAggregateOutput(TypedDict, total=False):
    """ChatSession output for aggregating averages"""


class ChatSessionSumAggregateOutput(TypedDict, total=False):
    """ChatSession output for aggregating sums"""


class ChatSessionScalarAggregateOutput(TypedDict, total=False):
    """ChatSession output including scalar fields"""
    id: _str
    title: _str
    user_id: _str
    document_id: _str
    is_saved: _bool
    created_at: datetime.datetime
    updated_at: datetime.datetime


ChatSessionMinAggregateOutput = ChatSessionScalarAggregateOutput
ChatSessionMaxAggregateOutput = ChatSessionScalarAggregateOutput


class ChatSessionMaxAggregateInput(TypedDict, total=False):
    """ChatSession input for aggregating by max"""
    id: bool
    title: bool
    user_id: bool
    document_id: bool
    is_saved: bool
    created_at: bool
    updated_at: bool


class ChatSessionMinAggregateInput(TypedDict, total=False):
    """ChatSession input for aggregating by min"""
    id: bool
    title: bool
    user_id: bool
    document_id: bool
    is_saved: bool
    created_at: bool
    updated_at: bool


class ChatSessionNumberAggregateInput(TypedDict, total=False):
    """ChatSession input for aggregating numbers"""


ChatSessionAvgAggregateInput = ChatSessionNumberAggregateInput
ChatSessionSumAggregateInput = ChatSessionNumberAggregateInput


ChatSessionCountAggregateInput = TypedDict(
    'ChatSessionCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'user_id': bool,
        'document_id': bool,
        'is_saved': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

ChatSessionCountAggregateOutput = TypedDict(
    'ChatSessionCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'user_id': int,
        'document_id': int,
        'is_saved': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


ChatSessionKeys = Literal[
    'id',
    'title',
    'user_id',
    'user',
    'document_id',
    'document',
    'is_saved',
    'created_at',
    'updated_at',
    'messages',
]
ChatSessionScalarFieldKeys = Literal[
    'id',
    'title',
    'user_id',
    'document_id',
    'is_saved',
    'created_at',
    'updated_at',
]
ChatSessionScalarFieldKeysT = TypeVar('ChatSessionScalarFieldKeysT', bound=ChatSessionScalarFieldKeys)

ChatSessionRelationalFieldKeys = Literal[
        'user',
        'document',
        'messages',
    ]

# ChatMessage types

class ChatMessageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ChatMessage create method"""
    id: _str
    session_id: _str
    session: 'ChatSessionCreateNestedWithoutRelationsInput'
    source_nodes: Optional['fields.Json']
    tokens_used: Optional[_int]
    created_at: datetime.datetime


class ChatMessageCreateInput(ChatMessageOptionalCreateInput):
    """Required arguments to the ChatMessage create method"""
    role: 'enums.MessageRole'
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ChatMessageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ChatMessage create method, without relations"""
    id: _str
    session_id: _str
    source_nodes: Optional['fields.Json']
    tokens_used: Optional[_int]
    created_at: datetime.datetime


class ChatMessageCreateWithoutRelationsInput(ChatMessageOptionalCreateWithoutRelationsInput):
    """Required arguments to the ChatMessage create method, without relations"""
    role: 'enums.MessageRole'
    content: _str

class ChatMessageConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ChatMessageCreateWithoutRelationsInput'
    where: 'ChatMessageWhereUniqueInput'

class ChatMessageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ChatMessageCreateWithoutRelationsInput'
    connect: 'ChatMessageWhereUniqueInput'
    connect_or_create: 'ChatMessageConnectOrCreateWithoutRelationsInput'


class ChatMessageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ChatMessageCreateWithoutRelationsInput', List['ChatMessageCreateWithoutRelationsInput']]
    connect: Union['ChatMessageWhereUniqueInput', List['ChatMessageWhereUniqueInput']]
    connect_or_create: Union['ChatMessageConnectOrCreateWithoutRelationsInput', List['ChatMessageConnectOrCreateWithoutRelationsInput']]

_ChatMessageWhereUnique_id_Input = TypedDict(
    '_ChatMessageWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ChatMessageWhereUniqueInput = _ChatMessageWhereUnique_id_Input


class ChatMessageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    session: 'ChatSessionUpdateOneWithoutRelationsInput'
    role: 'enums.MessageRole'
    content: _str
    source_nodes: Optional['fields.Json']
    tokens_used: Optional[Union[AtomicIntInput, _int]]
    created_at: datetime.datetime


class ChatMessageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: 'enums.MessageRole'
    content: _str
    source_nodes: Optional['fields.Json']
    tokens_used: Optional[Union[AtomicIntInput, _int]]
    created_at: datetime.datetime


class ChatMessageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ChatMessageCreateWithoutRelationsInput']
    connect: List['ChatMessageWhereUniqueInput']
    connect_or_create: List['ChatMessageConnectOrCreateWithoutRelationsInput']
    set: List['ChatMessageWhereUniqueInput']
    disconnect: List['ChatMessageWhereUniqueInput']
    delete: List['ChatMessageWhereUniqueInput']

    # TODO
    # update: List['ChatMessageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ChatMessageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ChatMessageScalarWhereInput']
    # upsert: List['ChatMessageUpserteWithWhereUniqueWithoutRelationsInput']


class ChatMessageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ChatMessageCreateWithoutRelationsInput'
    connect: 'ChatMessageWhereUniqueInput'
    connect_or_create: 'ChatMessageConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ChatMessageUpdateInput'
    # upsert: 'ChatMessageUpsertWithoutRelationsInput'


class ChatMessageUpsertInput(TypedDict):
    create: 'ChatMessageCreateInput'
    update: 'ChatMessageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ChatMessage_id_OrderByInput = TypedDict(
    '_ChatMessage_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ChatMessage_session_id_OrderByInput = TypedDict(
    '_ChatMessage_session_id_OrderByInput',
    {
        'session_id': 'SortOrder',
    },
    total=True
)

_ChatMessage_role_OrderByInput = TypedDict(
    '_ChatMessage_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_ChatMessage_content_OrderByInput = TypedDict(
    '_ChatMessage_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_ChatMessage_source_nodes_OrderByInput = TypedDict(
    '_ChatMessage_source_nodes_OrderByInput',
    {
        'source_nodes': 'SortOrder',
    },
    total=True
)

_ChatMessage_tokens_used_OrderByInput = TypedDict(
    '_ChatMessage_tokens_used_OrderByInput',
    {
        'tokens_used': 'SortOrder',
    },
    total=True
)

_ChatMessage_created_at_OrderByInput = TypedDict(
    '_ChatMessage_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_ChatMessage_RelevanceInner = TypedDict(
    '_ChatMessage_RelevanceInner',
    {
        'fields': 'List[ChatMessageScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ChatMessage_RelevanceOrderByInput = TypedDict(
    '_ChatMessage_RelevanceOrderByInput',
    {
        '_relevance': '_ChatMessage_RelevanceInner',
    },
    total=True
)

ChatMessageOrderByInput = Union[
    '_ChatMessage_id_OrderByInput',
    '_ChatMessage_session_id_OrderByInput',
    '_ChatMessage_role_OrderByInput',
    '_ChatMessage_content_OrderByInput',
    '_ChatMessage_source_nodes_OrderByInput',
    '_ChatMessage_tokens_used_OrderByInput',
    '_ChatMessage_created_at_OrderByInput',
    '_ChatMessage_RelevanceOrderByInput',
]



# recursive ChatMessage types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ChatMessageRelationFilter = TypedDict(
    'ChatMessageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ChatMessageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ChatMessageInclude(TypedDict, total=False):
    """ChatMessage relational arguments"""
    session: Union[bool, 'ChatSessionArgsFromChatMessage']


    

class UserIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    documents: Union[bool, 'FindManyDocumentArgsFromChatMessageRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatMessageRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromChatMessageRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromChatMessageRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromChatMessageRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromChatMessageRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromChatMessageRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromChatMessageRecursive1']


class UserIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    documents: Union[bool, 'FindManyDocumentArgsFromChatMessageRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatMessageRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromChatMessageRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromChatMessageRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromChatMessageRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromChatMessageRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromChatMessageRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromChatMessageRecursive2']


class UserIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    documents: Union[bool, 'FindManyDocumentArgsFromChatMessageRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatMessageRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromChatMessageRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromChatMessageRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromChatMessageRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromChatMessageRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromChatMessageRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromChatMessageRecursive3']


class UserIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    documents: Union[bool, 'FindManyDocumentArgsFromChatMessageRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatMessageRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromChatMessageRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromChatMessageRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromChatMessageRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromChatMessageRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromChatMessageRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromChatMessageRecursive4']


class UserIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class UserArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyUserArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class SubscriptionIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class SubscriptionIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class SubscriptionIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class SubscriptionIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class SubscriptionArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManySubscriptionArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class UserSettingsIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class UserSettingsIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class UserSettingsIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class UserSettingsIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class UserSettingsArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyUserSettingsArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    owner: Union[bool, 'UserArgsFromChatMessageRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatMessageRecursive1']


class DocumentIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    owner: Union[bool, 'UserArgsFromChatMessageRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatMessageRecursive2']


class DocumentIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    owner: Union[bool, 'UserArgsFromChatMessageRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatMessageRecursive3']


class DocumentIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    owner: Union[bool, 'UserArgsFromChatMessageRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromChatMessageRecursive4']


class DocumentIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class DocumentArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyDocumentArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']
    document: Union[bool, 'DocumentArgsFromChatMessageRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatMessageRecursive1']


class ChatSessionIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']
    document: Union[bool, 'DocumentArgsFromChatMessageRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatMessageRecursive2']


class ChatSessionIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']
    document: Union[bool, 'DocumentArgsFromChatMessageRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatMessageRecursive3']


class ChatSessionIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']
    document: Union[bool, 'DocumentArgsFromChatMessageRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromChatMessageRecursive4']


class ChatSessionIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class ChatSessionArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyChatSessionArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    session: Union[bool, 'ChatSessionArgsFromChatMessageRecursive1']


class ChatMessageIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    session: Union[bool, 'ChatSessionArgsFromChatMessageRecursive2']


class ChatMessageIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    session: Union[bool, 'ChatSessionArgsFromChatMessageRecursive3']


class ChatMessageIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    session: Union[bool, 'ChatSessionArgsFromChatMessageRecursive4']


class ChatMessageIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class ChatMessageArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyChatMessageArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class SecurityLogIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class SecurityLogIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class SecurityLogIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class SecurityLogIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class SecurityLogArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManySecurityLogArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class VerificationTokenIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class VerificationTokenIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class VerificationTokenIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class VerificationTokenIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class VerificationTokenArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyVerificationTokenArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class AccountIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class AccountIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class AccountIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class AccountIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class AccountArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyAccountArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class SessionIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class SessionIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class SessionIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class SessionIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class SessionArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManySessionArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManyChatMessageArgs = FindManyChatMessageArgsFromChatMessage
FindFirstChatMessageArgs = FindManyChatMessageArgsFromChatMessage


    

class ChatMessageWhereInput(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    session_id: Union[_str, 'types.StringFilter']
    session: 'ChatSessionRelationFilter'
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringFilter']
    source_nodes: Union[None, 'fields.Json', 'types.JsonFilter']
    tokens_used: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChatMessageWhereInputRecursive1', List['ChatMessageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ChatMessageWhereInputRecursive1']
    OR: List['ChatMessageWhereInputRecursive1']
    NOT: List['ChatMessageWhereInputRecursive1']


class ChatMessageWhereInputRecursive1(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    session_id: Union[_str, 'types.StringFilter']
    session: 'ChatSessionRelationFilter'
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringFilter']
    source_nodes: Union[None, 'fields.Json', 'types.JsonFilter']
    tokens_used: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChatMessageWhereInputRecursive2', List['ChatMessageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ChatMessageWhereInputRecursive2']
    OR: List['ChatMessageWhereInputRecursive2']
    NOT: List['ChatMessageWhereInputRecursive2']


class ChatMessageWhereInputRecursive2(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    session_id: Union[_str, 'types.StringFilter']
    session: 'ChatSessionRelationFilter'
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringFilter']
    source_nodes: Union[None, 'fields.Json', 'types.JsonFilter']
    tokens_used: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChatMessageWhereInputRecursive3', List['ChatMessageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ChatMessageWhereInputRecursive3']
    OR: List['ChatMessageWhereInputRecursive3']
    NOT: List['ChatMessageWhereInputRecursive3']


class ChatMessageWhereInputRecursive3(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    session_id: Union[_str, 'types.StringFilter']
    session: 'ChatSessionRelationFilter'
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringFilter']
    source_nodes: Union[None, 'fields.Json', 'types.JsonFilter']
    tokens_used: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChatMessageWhereInputRecursive4', List['ChatMessageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ChatMessageWhereInputRecursive4']
    OR: List['ChatMessageWhereInputRecursive4']
    NOT: List['ChatMessageWhereInputRecursive4']


class ChatMessageWhereInputRecursive4(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    session_id: Union[_str, 'types.StringFilter']
    session: 'ChatSessionRelationFilter'
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringFilter']
    source_nodes: Union[None, 'fields.Json', 'types.JsonFilter']
    tokens_used: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate ChatMessage types


    

class ChatMessageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source_nodes: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatMessageScalarWhereWithAggregatesInputRecursive1']
    OR: List['ChatMessageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ChatMessageScalarWhereWithAggregatesInputRecursive1']


class ChatMessageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source_nodes: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatMessageScalarWhereWithAggregatesInputRecursive2']
    OR: List['ChatMessageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ChatMessageScalarWhereWithAggregatesInputRecursive2']


class ChatMessageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source_nodes: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatMessageScalarWhereWithAggregatesInputRecursive3']
    OR: List['ChatMessageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ChatMessageScalarWhereWithAggregatesInputRecursive3']


class ChatMessageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source_nodes: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatMessageScalarWhereWithAggregatesInputRecursive4']
    OR: List['ChatMessageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ChatMessageScalarWhereWithAggregatesInputRecursive4']


class ChatMessageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    session_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.MessageRole'
    content: Union[_str, 'types.StringWithAggregatesFilter']
    source_nodes: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    tokens_used: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ChatMessageGroupByOutput(TypedDict, total=False):
    id: _str
    session_id: _str
    role: 'enums.MessageRole'
    content: _str
    source_nodes: 'fields.Json'
    tokens_used: _int
    created_at: datetime.datetime
    _sum: 'ChatMessageSumAggregateOutput'
    _avg: 'ChatMessageAvgAggregateOutput'
    _min: 'ChatMessageMinAggregateOutput'
    _max: 'ChatMessageMaxAggregateOutput'
    _count: 'ChatMessageCountAggregateOutput'


class ChatMessageAvgAggregateOutput(TypedDict, total=False):
    """ChatMessage output for aggregating averages"""
    tokens_used: float


class ChatMessageSumAggregateOutput(TypedDict, total=False):
    """ChatMessage output for aggregating sums"""
    tokens_used: _int


class ChatMessageScalarAggregateOutput(TypedDict, total=False):
    """ChatMessage output including scalar fields"""
    id: _str
    session_id: _str
    role: 'enums.MessageRole'
    content: _str
    source_nodes: 'fields.Json'
    tokens_used: _int
    created_at: datetime.datetime


ChatMessageMinAggregateOutput = ChatMessageScalarAggregateOutput
ChatMessageMaxAggregateOutput = ChatMessageScalarAggregateOutput


class ChatMessageMaxAggregateInput(TypedDict, total=False):
    """ChatMessage input for aggregating by max"""
    id: bool
    session_id: bool
    role: bool
    content: bool
    source_nodes: bool
    tokens_used: bool
    created_at: bool


class ChatMessageMinAggregateInput(TypedDict, total=False):
    """ChatMessage input for aggregating by min"""
    id: bool
    session_id: bool
    role: bool
    content: bool
    source_nodes: bool
    tokens_used: bool
    created_at: bool


class ChatMessageNumberAggregateInput(TypedDict, total=False):
    """ChatMessage input for aggregating numbers"""
    tokens_used: bool


ChatMessageAvgAggregateInput = ChatMessageNumberAggregateInput
ChatMessageSumAggregateInput = ChatMessageNumberAggregateInput


ChatMessageCountAggregateInput = TypedDict(
    'ChatMessageCountAggregateInput',
    {
        'id': bool,
        'session_id': bool,
        'role': bool,
        'content': bool,
        'source_nodes': bool,
        'tokens_used': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

ChatMessageCountAggregateOutput = TypedDict(
    'ChatMessageCountAggregateOutput',
    {
        'id': int,
        'session_id': int,
        'role': int,
        'content': int,
        'source_nodes': int,
        'tokens_used': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


ChatMessageKeys = Literal[
    'id',
    'session_id',
    'session',
    'role',
    'content',
    'source_nodes',
    'tokens_used',
    'created_at',
]
ChatMessageScalarFieldKeys = Literal[
    'id',
    'session_id',
    'role',
    'content',
    'source_nodes',
    'tokens_used',
    'created_at',
]
ChatMessageScalarFieldKeysT = TypeVar('ChatMessageScalarFieldKeysT', bound=ChatMessageScalarFieldKeys)

ChatMessageRelationalFieldKeys = Literal[
        'session',
    ]

# SecurityLog types

class SecurityLogOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the SecurityLog create method"""
    id: _str
    user_id: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    details: Optional[_str]
    ip_address: Optional[_str]
    user_agent: Optional[_str]
    created_at: datetime.datetime


class SecurityLogCreateInput(SecurityLogOptionalCreateInput):
    """Required arguments to the SecurityLog create method"""
    action: 'enums.SecurityAction'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SecurityLogOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the SecurityLog create method, without relations"""
    id: _str
    user_id: _str
    details: Optional[_str]
    ip_address: Optional[_str]
    user_agent: Optional[_str]
    created_at: datetime.datetime


class SecurityLogCreateWithoutRelationsInput(SecurityLogOptionalCreateWithoutRelationsInput):
    """Required arguments to the SecurityLog create method, without relations"""
    action: 'enums.SecurityAction'

class SecurityLogConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SecurityLogCreateWithoutRelationsInput'
    where: 'SecurityLogWhereUniqueInput'

class SecurityLogCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SecurityLogCreateWithoutRelationsInput'
    connect: 'SecurityLogWhereUniqueInput'
    connect_or_create: 'SecurityLogConnectOrCreateWithoutRelationsInput'


class SecurityLogCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SecurityLogCreateWithoutRelationsInput', List['SecurityLogCreateWithoutRelationsInput']]
    connect: Union['SecurityLogWhereUniqueInput', List['SecurityLogWhereUniqueInput']]
    connect_or_create: Union['SecurityLogConnectOrCreateWithoutRelationsInput', List['SecurityLogConnectOrCreateWithoutRelationsInput']]

_SecurityLogWhereUnique_id_Input = TypedDict(
    '_SecurityLogWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

SecurityLogWhereUniqueInput = _SecurityLogWhereUnique_id_Input


class SecurityLogUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    action: 'enums.SecurityAction'
    details: Optional[_str]
    ip_address: Optional[_str]
    user_agent: Optional[_str]
    created_at: datetime.datetime


class SecurityLogUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    action: 'enums.SecurityAction'
    details: Optional[_str]
    ip_address: Optional[_str]
    user_agent: Optional[_str]
    created_at: datetime.datetime


class SecurityLogUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SecurityLogCreateWithoutRelationsInput']
    connect: List['SecurityLogWhereUniqueInput']
    connect_or_create: List['SecurityLogConnectOrCreateWithoutRelationsInput']
    set: List['SecurityLogWhereUniqueInput']
    disconnect: List['SecurityLogWhereUniqueInput']
    delete: List['SecurityLogWhereUniqueInput']

    # TODO
    # update: List['SecurityLogUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SecurityLogUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SecurityLogScalarWhereInput']
    # upsert: List['SecurityLogUpserteWithWhereUniqueWithoutRelationsInput']


class SecurityLogUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SecurityLogCreateWithoutRelationsInput'
    connect: 'SecurityLogWhereUniqueInput'
    connect_or_create: 'SecurityLogConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SecurityLogUpdateInput'
    # upsert: 'SecurityLogUpsertWithoutRelationsInput'


class SecurityLogUpsertInput(TypedDict):
    create: 'SecurityLogCreateInput'
    update: 'SecurityLogUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_SecurityLog_id_OrderByInput = TypedDict(
    '_SecurityLog_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_SecurityLog_user_id_OrderByInput = TypedDict(
    '_SecurityLog_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_SecurityLog_action_OrderByInput = TypedDict(
    '_SecurityLog_action_OrderByInput',
    {
        'action': 'SortOrder',
    },
    total=True
)

_SecurityLog_details_OrderByInput = TypedDict(
    '_SecurityLog_details_OrderByInput',
    {
        'details': 'SortOrder',
    },
    total=True
)

_SecurityLog_ip_address_OrderByInput = TypedDict(
    '_SecurityLog_ip_address_OrderByInput',
    {
        'ip_address': 'SortOrder',
    },
    total=True
)

_SecurityLog_user_agent_OrderByInput = TypedDict(
    '_SecurityLog_user_agent_OrderByInput',
    {
        'user_agent': 'SortOrder',
    },
    total=True
)

_SecurityLog_created_at_OrderByInput = TypedDict(
    '_SecurityLog_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_SecurityLog_RelevanceInner = TypedDict(
    '_SecurityLog_RelevanceInner',
    {
        'fields': 'List[SecurityLogScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_SecurityLog_RelevanceOrderByInput = TypedDict(
    '_SecurityLog_RelevanceOrderByInput',
    {
        '_relevance': '_SecurityLog_RelevanceInner',
    },
    total=True
)

SecurityLogOrderByInput = Union[
    '_SecurityLog_id_OrderByInput',
    '_SecurityLog_user_id_OrderByInput',
    '_SecurityLog_action_OrderByInput',
    '_SecurityLog_details_OrderByInput',
    '_SecurityLog_ip_address_OrderByInput',
    '_SecurityLog_user_agent_OrderByInput',
    '_SecurityLog_created_at_OrderByInput',
    '_SecurityLog_RelevanceOrderByInput',
]



# recursive SecurityLog types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SecurityLogRelationFilter = TypedDict(
    'SecurityLogRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SecurityLogListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SecurityLogInclude(TypedDict, total=False):
    """SecurityLog relational arguments"""
    user: Union[bool, 'UserArgsFromSecurityLog']


    

class UserIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    documents: Union[bool, 'FindManyDocumentArgsFromSecurityLogRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSecurityLogRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSecurityLogRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromSecurityLogRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSecurityLogRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSecurityLogRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromSecurityLogRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromSecurityLogRecursive1']


class UserIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    documents: Union[bool, 'FindManyDocumentArgsFromSecurityLogRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSecurityLogRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSecurityLogRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromSecurityLogRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSecurityLogRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSecurityLogRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromSecurityLogRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromSecurityLogRecursive2']


class UserIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    documents: Union[bool, 'FindManyDocumentArgsFromSecurityLogRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSecurityLogRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSecurityLogRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromSecurityLogRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSecurityLogRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSecurityLogRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromSecurityLogRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromSecurityLogRecursive3']


class UserIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    documents: Union[bool, 'FindManyDocumentArgsFromSecurityLogRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSecurityLogRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSecurityLogRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromSecurityLogRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSecurityLogRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSecurityLogRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromSecurityLogRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromSecurityLogRecursive4']


class UserIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class UserArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManyUserArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive1']


class SubscriptionIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive2']


class SubscriptionIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive3']


class SubscriptionIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive4']


class SubscriptionIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class SubscriptionArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManySubscriptionArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive1']


class UserSettingsIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive2']


class UserSettingsIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive3']


class UserSettingsIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive4']


class UserSettingsIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class UserSettingsArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManyUserSettingsArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    owner: Union[bool, 'UserArgsFromSecurityLogRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSecurityLogRecursive1']


class DocumentIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    owner: Union[bool, 'UserArgsFromSecurityLogRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSecurityLogRecursive2']


class DocumentIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    owner: Union[bool, 'UserArgsFromSecurityLogRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSecurityLogRecursive3']


class DocumentIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    owner: Union[bool, 'UserArgsFromSecurityLogRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSecurityLogRecursive4']


class DocumentIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class DocumentArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManyDocumentArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive1']
    document: Union[bool, 'DocumentArgsFromSecurityLogRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromSecurityLogRecursive1']


class ChatSessionIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive2']
    document: Union[bool, 'DocumentArgsFromSecurityLogRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromSecurityLogRecursive2']


class ChatSessionIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive3']
    document: Union[bool, 'DocumentArgsFromSecurityLogRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromSecurityLogRecursive3']


class ChatSessionIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive4']
    document: Union[bool, 'DocumentArgsFromSecurityLogRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromSecurityLogRecursive4']


class ChatSessionIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class ChatSessionArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManyChatSessionArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    session: Union[bool, 'ChatSessionArgsFromSecurityLogRecursive1']


class ChatMessageIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    session: Union[bool, 'ChatSessionArgsFromSecurityLogRecursive2']


class ChatMessageIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    session: Union[bool, 'ChatSessionArgsFromSecurityLogRecursive3']


class ChatMessageIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    session: Union[bool, 'ChatSessionArgsFromSecurityLogRecursive4']


class ChatMessageIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class ChatMessageArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManyChatMessageArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive1']


class SecurityLogIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive2']


class SecurityLogIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive3']


class SecurityLogIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive4']


class SecurityLogIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class SecurityLogArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManySecurityLogArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive1']


class VerificationTokenIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive2']


class VerificationTokenIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive3']


class VerificationTokenIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive4']


class VerificationTokenIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class VerificationTokenArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManyVerificationTokenArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive1']


class AccountIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive2']


class AccountIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive3']


class AccountIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive4']


class AccountIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class AccountArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManyAccountArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSecurityLog(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive1']


class SessionIncludeFromSecurityLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive2']


class SessionIncludeFromSecurityLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive3']


class SessionIncludeFromSecurityLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityLog"""
    user: Union[bool, 'UserArgsFromSecurityLogRecursive4']


class SessionIncludeFromSecurityLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityLog"""

    

class SessionArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    
    

class FindManySessionArgsFromSecurityLog(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSecurityLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSecurityLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSecurityLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSecurityLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManySecurityLogArgs = FindManySecurityLogArgsFromSecurityLog
FindFirstSecurityLogArgs = FindManySecurityLogArgsFromSecurityLog


    

class SecurityLogWhereInput(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    action: 'enums.SecurityAction'
    details: Union[None, _str, 'types.StringFilter']
    ip_address: Union[None, _str, 'types.StringFilter']
    user_agent: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SecurityLogWhereInputRecursive1', List['SecurityLogWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SecurityLogWhereInputRecursive1']
    OR: List['SecurityLogWhereInputRecursive1']
    NOT: List['SecurityLogWhereInputRecursive1']


class SecurityLogWhereInputRecursive1(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    action: 'enums.SecurityAction'
    details: Union[None, _str, 'types.StringFilter']
    ip_address: Union[None, _str, 'types.StringFilter']
    user_agent: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SecurityLogWhereInputRecursive2', List['SecurityLogWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SecurityLogWhereInputRecursive2']
    OR: List['SecurityLogWhereInputRecursive2']
    NOT: List['SecurityLogWhereInputRecursive2']


class SecurityLogWhereInputRecursive2(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    action: 'enums.SecurityAction'
    details: Union[None, _str, 'types.StringFilter']
    ip_address: Union[None, _str, 'types.StringFilter']
    user_agent: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SecurityLogWhereInputRecursive3', List['SecurityLogWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SecurityLogWhereInputRecursive3']
    OR: List['SecurityLogWhereInputRecursive3']
    NOT: List['SecurityLogWhereInputRecursive3']


class SecurityLogWhereInputRecursive3(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    action: 'enums.SecurityAction'
    details: Union[None, _str, 'types.StringFilter']
    ip_address: Union[None, _str, 'types.StringFilter']
    user_agent: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SecurityLogWhereInputRecursive4', List['SecurityLogWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SecurityLogWhereInputRecursive4']
    OR: List['SecurityLogWhereInputRecursive4']
    NOT: List['SecurityLogWhereInputRecursive4']


class SecurityLogWhereInputRecursive4(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    action: 'enums.SecurityAction'
    details: Union[None, _str, 'types.StringFilter']
    ip_address: Union[None, _str, 'types.StringFilter']
    user_agent: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate SecurityLog types


    

class SecurityLogScalarWhereWithAggregatesInput(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.SecurityAction'
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ip_address: Union[_str, 'types.StringWithAggregatesFilter']
    user_agent: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SecurityLogScalarWhereWithAggregatesInputRecursive1']
    OR: List['SecurityLogScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SecurityLogScalarWhereWithAggregatesInputRecursive1']


class SecurityLogScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.SecurityAction'
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ip_address: Union[_str, 'types.StringWithAggregatesFilter']
    user_agent: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SecurityLogScalarWhereWithAggregatesInputRecursive2']
    OR: List['SecurityLogScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SecurityLogScalarWhereWithAggregatesInputRecursive2']


class SecurityLogScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.SecurityAction'
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ip_address: Union[_str, 'types.StringWithAggregatesFilter']
    user_agent: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SecurityLogScalarWhereWithAggregatesInputRecursive3']
    OR: List['SecurityLogScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SecurityLogScalarWhereWithAggregatesInputRecursive3']


class SecurityLogScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.SecurityAction'
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ip_address: Union[_str, 'types.StringWithAggregatesFilter']
    user_agent: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SecurityLogScalarWhereWithAggregatesInputRecursive4']
    OR: List['SecurityLogScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SecurityLogScalarWhereWithAggregatesInputRecursive4']


class SecurityLogScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """SecurityLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.SecurityAction'
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ip_address: Union[_str, 'types.StringWithAggregatesFilter']
    user_agent: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SecurityLogGroupByOutput(TypedDict, total=False):
    id: _str
    user_id: _str
    action: 'enums.SecurityAction'
    details: _str
    ip_address: _str
    user_agent: _str
    created_at: datetime.datetime
    _sum: 'SecurityLogSumAggregateOutput'
    _avg: 'SecurityLogAvgAggregateOutput'
    _min: 'SecurityLogMinAggregateOutput'
    _max: 'SecurityLogMaxAggregateOutput'
    _count: 'SecurityLogCountAggregateOutput'


class SecurityLogAvgAggregateOutput(TypedDict, total=False):
    """SecurityLog output for aggregating averages"""


class SecurityLogSumAggregateOutput(TypedDict, total=False):
    """SecurityLog output for aggregating sums"""


class SecurityLogScalarAggregateOutput(TypedDict, total=False):
    """SecurityLog output including scalar fields"""
    id: _str
    user_id: _str
    action: 'enums.SecurityAction'
    details: _str
    ip_address: _str
    user_agent: _str
    created_at: datetime.datetime


SecurityLogMinAggregateOutput = SecurityLogScalarAggregateOutput
SecurityLogMaxAggregateOutput = SecurityLogScalarAggregateOutput


class SecurityLogMaxAggregateInput(TypedDict, total=False):
    """SecurityLog input for aggregating by max"""
    id: bool
    user_id: bool
    action: bool
    details: bool
    ip_address: bool
    user_agent: bool
    created_at: bool


class SecurityLogMinAggregateInput(TypedDict, total=False):
    """SecurityLog input for aggregating by min"""
    id: bool
    user_id: bool
    action: bool
    details: bool
    ip_address: bool
    user_agent: bool
    created_at: bool


class SecurityLogNumberAggregateInput(TypedDict, total=False):
    """SecurityLog input for aggregating numbers"""


SecurityLogAvgAggregateInput = SecurityLogNumberAggregateInput
SecurityLogSumAggregateInput = SecurityLogNumberAggregateInput


SecurityLogCountAggregateInput = TypedDict(
    'SecurityLogCountAggregateInput',
    {
        'id': bool,
        'user_id': bool,
        'action': bool,
        'details': bool,
        'ip_address': bool,
        'user_agent': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

SecurityLogCountAggregateOutput = TypedDict(
    'SecurityLogCountAggregateOutput',
    {
        'id': int,
        'user_id': int,
        'action': int,
        'details': int,
        'ip_address': int,
        'user_agent': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


SecurityLogKeys = Literal[
    'id',
    'user_id',
    'user',
    'action',
    'details',
    'ip_address',
    'user_agent',
    'created_at',
]
SecurityLogScalarFieldKeys = Literal[
    'id',
    'user_id',
    'action',
    'details',
    'ip_address',
    'user_agent',
    'created_at',
]
SecurityLogScalarFieldKeysT = TypeVar('SecurityLogScalarFieldKeysT', bound=SecurityLogScalarFieldKeys)

SecurityLogRelationalFieldKeys = Literal[
        'user',
    ]

# VerificationToken types

class VerificationTokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method"""
    id: _str
    user_id: Optional[_str]
    user: 'UserCreateNestedWithoutRelationsInput'
    type: 'enums.TokenType'
    used: _bool
    created_at: datetime.datetime


class VerificationTokenCreateInput(VerificationTokenOptionalCreateInput):
    """Required arguments to the VerificationToken create method"""
    email: _str
    key: _str
    token: _str
    expires_at: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VerificationTokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method, without relations"""
    id: _str
    user_id: Optional[_str]
    type: 'enums.TokenType'
    used: _bool
    created_at: datetime.datetime


class VerificationTokenCreateWithoutRelationsInput(VerificationTokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the VerificationToken create method, without relations"""
    email: _str
    key: _str
    token: _str
    expires_at: datetime.datetime

class VerificationTokenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    where: 'VerificationTokenWhereUniqueInput'

class VerificationTokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    connect_or_create: 'VerificationTokenConnectOrCreateWithoutRelationsInput'


class VerificationTokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VerificationTokenCreateWithoutRelationsInput', List['VerificationTokenCreateWithoutRelationsInput']]
    connect: Union['VerificationTokenWhereUniqueInput', List['VerificationTokenWhereUniqueInput']]
    connect_or_create: Union['VerificationTokenConnectOrCreateWithoutRelationsInput', List['VerificationTokenConnectOrCreateWithoutRelationsInput']]

_VerificationTokenWhereUnique_id_Input = TypedDict(
    '_VerificationTokenWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_VerificationTokenWhereUnique_token_Input = TypedDict(
    '_VerificationTokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

VerificationTokenWhereUniqueInput = Union[
    '_VerificationTokenWhereUnique_id_Input',
    '_VerificationTokenWhereUnique_token_Input',
]


class VerificationTokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    key: _str
    token: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    type: 'enums.TokenType'
    expires_at: datetime.datetime
    used: _bool
    created_at: datetime.datetime


class VerificationTokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    key: _str
    token: _str
    type: 'enums.TokenType'
    expires_at: datetime.datetime
    used: _bool
    created_at: datetime.datetime


class VerificationTokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VerificationTokenCreateWithoutRelationsInput']
    connect: List['VerificationTokenWhereUniqueInput']
    connect_or_create: List['VerificationTokenConnectOrCreateWithoutRelationsInput']
    set: List['VerificationTokenWhereUniqueInput']
    disconnect: List['VerificationTokenWhereUniqueInput']
    delete: List['VerificationTokenWhereUniqueInput']

    # TODO
    # update: List['VerificationTokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VerificationTokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VerificationTokenScalarWhereInput']
    # upsert: List['VerificationTokenUpserteWithWhereUniqueWithoutRelationsInput']


class VerificationTokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    connect_or_create: 'VerificationTokenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VerificationTokenUpdateInput'
    # upsert: 'VerificationTokenUpsertWithoutRelationsInput'


class VerificationTokenUpsertInput(TypedDict):
    create: 'VerificationTokenCreateInput'
    update: 'VerificationTokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_VerificationToken_id_OrderByInput = TypedDict(
    '_VerificationToken_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_VerificationToken_email_OrderByInput = TypedDict(
    '_VerificationToken_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_VerificationToken_key_OrderByInput = TypedDict(
    '_VerificationToken_key_OrderByInput',
    {
        'key': 'SortOrder',
    },
    total=True
)

_VerificationToken_token_OrderByInput = TypedDict(
    '_VerificationToken_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_VerificationToken_user_id_OrderByInput = TypedDict(
    '_VerificationToken_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_VerificationToken_type_OrderByInput = TypedDict(
    '_VerificationToken_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_VerificationToken_expires_at_OrderByInput = TypedDict(
    '_VerificationToken_expires_at_OrderByInput',
    {
        'expires_at': 'SortOrder',
    },
    total=True
)

_VerificationToken_used_OrderByInput = TypedDict(
    '_VerificationToken_used_OrderByInput',
    {
        'used': 'SortOrder',
    },
    total=True
)

_VerificationToken_created_at_OrderByInput = TypedDict(
    '_VerificationToken_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_VerificationToken_RelevanceInner = TypedDict(
    '_VerificationToken_RelevanceInner',
    {
        'fields': 'List[VerificationTokenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_VerificationToken_RelevanceOrderByInput = TypedDict(
    '_VerificationToken_RelevanceOrderByInput',
    {
        '_relevance': '_VerificationToken_RelevanceInner',
    },
    total=True
)

VerificationTokenOrderByInput = Union[
    '_VerificationToken_id_OrderByInput',
    '_VerificationToken_email_OrderByInput',
    '_VerificationToken_key_OrderByInput',
    '_VerificationToken_token_OrderByInput',
    '_VerificationToken_user_id_OrderByInput',
    '_VerificationToken_type_OrderByInput',
    '_VerificationToken_expires_at_OrderByInput',
    '_VerificationToken_used_OrderByInput',
    '_VerificationToken_created_at_OrderByInput',
    '_VerificationToken_RelevanceOrderByInput',
]



# recursive VerificationToken types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VerificationTokenRelationFilter = TypedDict(
    'VerificationTokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VerificationTokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VerificationTokenInclude(TypedDict, total=False):
    """VerificationToken relational arguments"""
    user: Union[bool, 'UserArgsFromVerificationToken']


    

class UserIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    documents: Union[bool, 'FindManyDocumentArgsFromVerificationTokenRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromVerificationTokenRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromVerificationTokenRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromVerificationTokenRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromVerificationTokenRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromVerificationTokenRecursive1']


class UserIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    documents: Union[bool, 'FindManyDocumentArgsFromVerificationTokenRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromVerificationTokenRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromVerificationTokenRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromVerificationTokenRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromVerificationTokenRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromVerificationTokenRecursive2']


class UserIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    documents: Union[bool, 'FindManyDocumentArgsFromVerificationTokenRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromVerificationTokenRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromVerificationTokenRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromVerificationTokenRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromVerificationTokenRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromVerificationTokenRecursive3']


class UserIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    documents: Union[bool, 'FindManyDocumentArgsFromVerificationTokenRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromVerificationTokenRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromVerificationTokenRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromVerificationTokenRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromVerificationTokenRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromVerificationTokenRecursive4']


class UserIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class SubscriptionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class SubscriptionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class SubscriptionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class SubscriptionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SubscriptionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySubscriptionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class UserSettingsIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class UserSettingsIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class UserSettingsIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class UserSettingsIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserSettingsArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserSettingsArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    owner: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromVerificationTokenRecursive1']


class DocumentIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    owner: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromVerificationTokenRecursive2']


class DocumentIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    owner: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromVerificationTokenRecursive3']


class DocumentIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    owner: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromVerificationTokenRecursive4']


class DocumentIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class DocumentArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyDocumentArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    document: Union[bool, 'DocumentArgsFromVerificationTokenRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromVerificationTokenRecursive1']


class ChatSessionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    document: Union[bool, 'DocumentArgsFromVerificationTokenRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromVerificationTokenRecursive2']


class ChatSessionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    document: Union[bool, 'DocumentArgsFromVerificationTokenRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromVerificationTokenRecursive3']


class ChatSessionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    document: Union[bool, 'DocumentArgsFromVerificationTokenRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromVerificationTokenRecursive4']


class ChatSessionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class ChatSessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyChatSessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    session: Union[bool, 'ChatSessionArgsFromVerificationTokenRecursive1']


class ChatMessageIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    session: Union[bool, 'ChatSessionArgsFromVerificationTokenRecursive2']


class ChatMessageIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    session: Union[bool, 'ChatSessionArgsFromVerificationTokenRecursive3']


class ChatMessageIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    session: Union[bool, 'ChatSessionArgsFromVerificationTokenRecursive4']


class ChatMessageIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class ChatMessageArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyChatMessageArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class SecurityLogIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class SecurityLogIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class SecurityLogIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class SecurityLogIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SecurityLogArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySecurityLogArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class VerificationTokenIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class VerificationTokenIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class VerificationTokenIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class VerificationTokenIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class VerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyVerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class AccountIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class AccountIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class AccountIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class AccountIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class AccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyAccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class SessionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class SessionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class SessionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class SessionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManyVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken
FindFirstVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken


    

class VerificationTokenWhereInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    key: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    user_id: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeFilter']
    used: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive1', List['VerificationTokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive1']
    OR: List['VerificationTokenWhereInputRecursive1']
    NOT: List['VerificationTokenWhereInputRecursive1']


class VerificationTokenWhereInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    key: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    user_id: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeFilter']
    used: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive2', List['VerificationTokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive2']
    OR: List['VerificationTokenWhereInputRecursive2']
    NOT: List['VerificationTokenWhereInputRecursive2']


class VerificationTokenWhereInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    key: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    user_id: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeFilter']
    used: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive3', List['VerificationTokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive3']
    OR: List['VerificationTokenWhereInputRecursive3']
    NOT: List['VerificationTokenWhereInputRecursive3']


class VerificationTokenWhereInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    key: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    user_id: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeFilter']
    used: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive4', List['VerificationTokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive4']
    OR: List['VerificationTokenWhereInputRecursive4']
    NOT: List['VerificationTokenWhereInputRecursive4']


class VerificationTokenWhereInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    key: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    user_id: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeFilter']
    used: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate VerificationToken types


    

class VerificationTokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    key: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    used: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']


class VerificationTokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    key: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    used: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']


class VerificationTokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    key: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    used: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']


class VerificationTokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    key: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    used: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']


class VerificationTokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    key: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.TokenType'
    expires_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    used: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VerificationTokenGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    key: _str
    token: _str
    user_id: _str
    type: 'enums.TokenType'
    expires_at: datetime.datetime
    used: _bool
    created_at: datetime.datetime
    _sum: 'VerificationTokenSumAggregateOutput'
    _avg: 'VerificationTokenAvgAggregateOutput'
    _min: 'VerificationTokenMinAggregateOutput'
    _max: 'VerificationTokenMaxAggregateOutput'
    _count: 'VerificationTokenCountAggregateOutput'


class VerificationTokenAvgAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating averages"""


class VerificationTokenSumAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating sums"""


class VerificationTokenScalarAggregateOutput(TypedDict, total=False):
    """VerificationToken output including scalar fields"""
    id: _str
    email: _str
    key: _str
    token: _str
    user_id: _str
    type: 'enums.TokenType'
    expires_at: datetime.datetime
    used: _bool
    created_at: datetime.datetime


VerificationTokenMinAggregateOutput = VerificationTokenScalarAggregateOutput
VerificationTokenMaxAggregateOutput = VerificationTokenScalarAggregateOutput


class VerificationTokenMaxAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by max"""
    id: bool
    email: bool
    key: bool
    token: bool
    user_id: bool
    type: bool
    expires_at: bool
    used: bool
    created_at: bool


class VerificationTokenMinAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by min"""
    id: bool
    email: bool
    key: bool
    token: bool
    user_id: bool
    type: bool
    expires_at: bool
    used: bool
    created_at: bool


class VerificationTokenNumberAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating numbers"""


VerificationTokenAvgAggregateInput = VerificationTokenNumberAggregateInput
VerificationTokenSumAggregateInput = VerificationTokenNumberAggregateInput


VerificationTokenCountAggregateInput = TypedDict(
    'VerificationTokenCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'key': bool,
        'token': bool,
        'user_id': bool,
        'type': bool,
        'expires_at': bool,
        'used': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

VerificationTokenCountAggregateOutput = TypedDict(
    'VerificationTokenCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'key': int,
        'token': int,
        'user_id': int,
        'type': int,
        'expires_at': int,
        'used': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


VerificationTokenKeys = Literal[
    'id',
    'email',
    'key',
    'token',
    'user_id',
    'user',
    'type',
    'expires_at',
    'used',
    'created_at',
]
VerificationTokenScalarFieldKeys = Literal[
    'id',
    'email',
    'key',
    'token',
    'user_id',
    'type',
    'expires_at',
    'used',
    'created_at',
]
VerificationTokenScalarFieldKeysT = TypeVar('VerificationTokenScalarFieldKeysT', bound=VerificationTokenScalarFieldKeys)

VerificationTokenRelationalFieldKeys = Literal[
        'user',
    ]

# Account types

class AccountOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Account create method"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class AccountCreateInput(AccountOptionalCreateInput):
    """Required arguments to the Account create method"""
    type: _str
    provider: _str
    providerAccountId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AccountOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Account create method, without relations"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AccountCreateWithoutRelationsInput(AccountOptionalCreateWithoutRelationsInput):
    """Required arguments to the Account create method, without relations"""
    type: _str
    provider: _str
    providerAccountId: _str

class AccountConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AccountCreateWithoutRelationsInput'
    where: 'AccountWhereUniqueInput'

class AccountCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'


class AccountCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AccountCreateWithoutRelationsInput', List['AccountCreateWithoutRelationsInput']]
    connect: Union['AccountWhereUniqueInput', List['AccountWhereUniqueInput']]
    connect_or_create: Union['AccountConnectOrCreateWithoutRelationsInput', List['AccountConnectOrCreateWithoutRelationsInput']]

_AccountWhereUnique_id_Input = TypedDict(
    '_AccountWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKeyInner = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKeyInner',
    {
        'provider': '_str',
        'providerAccountId': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKey = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKey',
    {
        'provider_providerAccountId': '_AccountCompoundprovider_providerAccountIdKeyInner',
    },
    total=True
)

AccountWhereUniqueInput = Union[
    '_AccountWhereUnique_id_Input',
    '_AccountCompoundprovider_providerAccountIdKey',
]


class AccountUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class AccountUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AccountUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AccountCreateWithoutRelationsInput']
    connect: List['AccountWhereUniqueInput']
    connect_or_create: List['AccountConnectOrCreateWithoutRelationsInput']
    set: List['AccountWhereUniqueInput']
    disconnect: List['AccountWhereUniqueInput']
    delete: List['AccountWhereUniqueInput']

    # TODO
    # update: List['AccountUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AccountUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AccountScalarWhereInput']
    # upsert: List['AccountUpserteWithWhereUniqueWithoutRelationsInput']


class AccountUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AccountUpdateInput'
    # upsert: 'AccountUpsertWithoutRelationsInput'


class AccountUpsertInput(TypedDict):
    create: 'AccountCreateInput'
    update: 'AccountUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Account_id_OrderByInput = TypedDict(
    '_Account_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Account_userId_OrderByInput = TypedDict(
    '_Account_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Account_type_OrderByInput = TypedDict(
    '_Account_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Account_provider_OrderByInput = TypedDict(
    '_Account_provider_OrderByInput',
    {
        'provider': 'SortOrder',
    },
    total=True
)

_Account_providerAccountId_OrderByInput = TypedDict(
    '_Account_providerAccountId_OrderByInput',
    {
        'providerAccountId': 'SortOrder',
    },
    total=True
)

_Account_refresh_token_OrderByInput = TypedDict(
    '_Account_refresh_token_OrderByInput',
    {
        'refresh_token': 'SortOrder',
    },
    total=True
)

_Account_access_token_OrderByInput = TypedDict(
    '_Account_access_token_OrderByInput',
    {
        'access_token': 'SortOrder',
    },
    total=True
)

_Account_expires_at_OrderByInput = TypedDict(
    '_Account_expires_at_OrderByInput',
    {
        'expires_at': 'SortOrder',
    },
    total=True
)

_Account_token_type_OrderByInput = TypedDict(
    '_Account_token_type_OrderByInput',
    {
        'token_type': 'SortOrder',
    },
    total=True
)

_Account_scope_OrderByInput = TypedDict(
    '_Account_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

_Account_id_token_OrderByInput = TypedDict(
    '_Account_id_token_OrderByInput',
    {
        'id_token': 'SortOrder',
    },
    total=True
)

_Account_session_state_OrderByInput = TypedDict(
    '_Account_session_state_OrderByInput',
    {
        'session_state': 'SortOrder',
    },
    total=True
)

_Account_created_at_OrderByInput = TypedDict(
    '_Account_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Account_updated_at_OrderByInput = TypedDict(
    '_Account_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Account_RelevanceInner = TypedDict(
    '_Account_RelevanceInner',
    {
        'fields': 'List[AccountScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Account_RelevanceOrderByInput = TypedDict(
    '_Account_RelevanceOrderByInput',
    {
        '_relevance': '_Account_RelevanceInner',
    },
    total=True
)

AccountOrderByInput = Union[
    '_Account_id_OrderByInput',
    '_Account_userId_OrderByInput',
    '_Account_type_OrderByInput',
    '_Account_provider_OrderByInput',
    '_Account_providerAccountId_OrderByInput',
    '_Account_refresh_token_OrderByInput',
    '_Account_access_token_OrderByInput',
    '_Account_expires_at_OrderByInput',
    '_Account_token_type_OrderByInput',
    '_Account_scope_OrderByInput',
    '_Account_id_token_OrderByInput',
    '_Account_session_state_OrderByInput',
    '_Account_created_at_OrderByInput',
    '_Account_updated_at_OrderByInput',
    '_Account_RelevanceOrderByInput',
]



# recursive Account types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AccountRelationFilter = TypedDict(
    'AccountRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AccountListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AccountInclude(TypedDict, total=False):
    """Account relational arguments"""
    user: Union[bool, 'UserArgsFromAccount']


    

class UserIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    documents: Union[bool, 'FindManyDocumentArgsFromAccountRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromAccountRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromAccountRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromAccountRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromAccountRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromAccountRecursive1']


class UserIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    documents: Union[bool, 'FindManyDocumentArgsFromAccountRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromAccountRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromAccountRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromAccountRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromAccountRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromAccountRecursive2']


class UserIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    documents: Union[bool, 'FindManyDocumentArgsFromAccountRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromAccountRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromAccountRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromAccountRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromAccountRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromAccountRecursive3']


class UserIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    documents: Union[bool, 'FindManyDocumentArgsFromAccountRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromAccountRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromAccountRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromAccountRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromAccountRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromAccountRecursive4']


class UserIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class SubscriptionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class SubscriptionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class SubscriptionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class SubscriptionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SubscriptionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySubscriptionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class UserSettingsIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class UserSettingsIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class UserSettingsIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class UserSettingsIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserSettingsArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserSettingsArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    owner: Union[bool, 'UserArgsFromAccountRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromAccountRecursive1']


class DocumentIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    owner: Union[bool, 'UserArgsFromAccountRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromAccountRecursive2']


class DocumentIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    owner: Union[bool, 'UserArgsFromAccountRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromAccountRecursive3']


class DocumentIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    owner: Union[bool, 'UserArgsFromAccountRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromAccountRecursive4']


class DocumentIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class DocumentArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyDocumentArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    document: Union[bool, 'DocumentArgsFromAccountRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromAccountRecursive1']


class ChatSessionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    document: Union[bool, 'DocumentArgsFromAccountRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromAccountRecursive2']


class ChatSessionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    document: Union[bool, 'DocumentArgsFromAccountRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromAccountRecursive3']


class ChatSessionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    document: Union[bool, 'DocumentArgsFromAccountRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromAccountRecursive4']


class ChatSessionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class ChatSessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyChatSessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    session: Union[bool, 'ChatSessionArgsFromAccountRecursive1']


class ChatMessageIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    session: Union[bool, 'ChatSessionArgsFromAccountRecursive2']


class ChatMessageIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    session: Union[bool, 'ChatSessionArgsFromAccountRecursive3']


class ChatMessageIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    session: Union[bool, 'ChatSessionArgsFromAccountRecursive4']


class ChatMessageIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class ChatMessageArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyChatMessageArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class SecurityLogIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class SecurityLogIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class SecurityLogIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class SecurityLogIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SecurityLogArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySecurityLogArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class VerificationTokenIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class VerificationTokenIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class VerificationTokenIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class VerificationTokenIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class VerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyVerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class AccountIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class AccountIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class AccountIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class AccountIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class AccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class SessionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class SessionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class SessionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class SessionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManyAccountArgs = FindManyAccountArgsFromAccount
FindFirstAccountArgs = FindManyAccountArgsFromAccount


    

class AccountWhereInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive1', List['AccountWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive1']
    OR: List['AccountWhereInputRecursive1']
    NOT: List['AccountWhereInputRecursive1']


class AccountWhereInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive2', List['AccountWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive2']
    OR: List['AccountWhereInputRecursive2']
    NOT: List['AccountWhereInputRecursive2']


class AccountWhereInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive3', List['AccountWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive3']
    OR: List['AccountWhereInputRecursive3']
    NOT: List['AccountWhereInputRecursive3']


class AccountWhereInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive4', List['AccountWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive4']
    OR: List['AccountWhereInputRecursive4']
    NOT: List['AccountWhereInputRecursive4']


class AccountWhereInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Account types


    

class AccountScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive1']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive1']


class AccountScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive2']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive2']


class AccountScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive3']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive3']


class AccountScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive4']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive4']


class AccountScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AccountGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'AccountSumAggregateOutput'
    _avg: 'AccountAvgAggregateOutput'
    _min: 'AccountMinAggregateOutput'
    _max: 'AccountMaxAggregateOutput'
    _count: 'AccountCountAggregateOutput'


class AccountAvgAggregateOutput(TypedDict, total=False):
    """Account output for aggregating averages"""
    expires_at: float


class AccountSumAggregateOutput(TypedDict, total=False):
    """Account output for aggregating sums"""
    expires_at: _int


class AccountScalarAggregateOutput(TypedDict, total=False):
    """Account output including scalar fields"""
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


AccountMinAggregateOutput = AccountScalarAggregateOutput
AccountMaxAggregateOutput = AccountScalarAggregateOutput


class AccountMaxAggregateInput(TypedDict, total=False):
    """Account input for aggregating by max"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool
    created_at: bool
    updated_at: bool


class AccountMinAggregateInput(TypedDict, total=False):
    """Account input for aggregating by min"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool
    created_at: bool
    updated_at: bool


class AccountNumberAggregateInput(TypedDict, total=False):
    """Account input for aggregating numbers"""
    expires_at: bool


AccountAvgAggregateInput = AccountNumberAggregateInput
AccountSumAggregateInput = AccountNumberAggregateInput


AccountCountAggregateInput = TypedDict(
    'AccountCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'type': bool,
        'provider': bool,
        'providerAccountId': bool,
        'refresh_token': bool,
        'access_token': bool,
        'expires_at': bool,
        'token_type': bool,
        'scope': bool,
        'id_token': bool,
        'session_state': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

AccountCountAggregateOutput = TypedDict(
    'AccountCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'type': int,
        'provider': int,
        'providerAccountId': int,
        'refresh_token': int,
        'access_token': int,
        'expires_at': int,
        'token_type': int,
        'scope': int,
        'id_token': int,
        'session_state': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


AccountKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
    'created_at',
    'updated_at',
    'user',
]
AccountScalarFieldKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
    'created_at',
    'updated_at',
]
AccountScalarFieldKeysT = TypeVar('AccountScalarFieldKeysT', bound=AccountScalarFieldKeys)

AccountRelationalFieldKeys = Literal[
        'user',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _str
    userId: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    sessionToken: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _str
    userId: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    sessionToken: _str
    expires: datetime.datetime

class SessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SessionCreateWithoutRelationsInput'
    where: 'SessionWhereUniqueInput'

class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]
    connect_or_create: Union['SessionConnectOrCreateWithoutRelationsInput', List['SessionConnectOrCreateWithoutRelationsInput']]

_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SessionWhereUnique_sessionToken_Input = TypedDict(
    '_SessionWhereUnique_sessionToken_Input',
    {
        'sessionToken': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_sessionToken_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    connect_or_create: List['SessionConnectOrCreateWithoutRelationsInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_sessionToken_OrderByInput = TypedDict(
    '_Session_sessionToken_OrderByInput',
    {
        'sessionToken': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_expires_OrderByInput = TypedDict(
    '_Session_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_Session_created_at_OrderByInput = TypedDict(
    '_Session_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Session_updated_at_OrderByInput = TypedDict(
    '_Session_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Session_RelevanceInner = TypedDict(
    '_Session_RelevanceInner',
    {
        'fields': 'List[SessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Session_RelevanceOrderByInput = TypedDict(
    '_Session_RelevanceOrderByInput',
    {
        '_relevance': '_Session_RelevanceInner',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_sessionToken_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_expires_OrderByInput',
    '_Session_created_at_OrderByInput',
    '_Session_updated_at_OrderByInput',
    '_Session_RelevanceOrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']


    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    documents: Union[bool, 'FindManyDocumentArgsFromSessionRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSessionRecursive1']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSessionRecursive1']
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSessionRecursive1']
    subscription: Union[bool, 'SubscriptionArgsFromSessionRecursive1']
    user_settings: Union[bool, 'UserSettingsArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    documents: Union[bool, 'FindManyDocumentArgsFromSessionRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSessionRecursive2']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSessionRecursive2']
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSessionRecursive2']
    subscription: Union[bool, 'SubscriptionArgsFromSessionRecursive2']
    user_settings: Union[bool, 'UserSettingsArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    documents: Union[bool, 'FindManyDocumentArgsFromSessionRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSessionRecursive3']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSessionRecursive3']
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSessionRecursive3']
    subscription: Union[bool, 'SubscriptionArgsFromSessionRecursive3']
    user_settings: Union[bool, 'UserSettingsArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    documents: Union[bool, 'FindManyDocumentArgsFromSessionRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSessionRecursive4']
    security_logs: Union[bool, 'FindManySecurityLogArgsFromSessionRecursive4']
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    verification_tokens: Union[bool, 'FindManyVerificationTokenArgsFromSessionRecursive4']
    subscription: Union[bool, 'SubscriptionArgsFromSessionRecursive4']
    user_settings: Union[bool, 'UserSettingsArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class SubscriptionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SubscriptionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SubscriptionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SubscriptionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SubscriptionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SubscriptionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class SubscriptionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class SubscriptionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class SubscriptionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class SubscriptionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySubscriptionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive1'


class FindManySubscriptionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive2'


class FindManySubscriptionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive3'


class FindManySubscriptionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    include: 'SubscriptionIncludeFromSubscriptionRecursive4'


class FindManySubscriptionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SubscriptionOrderByInput', List['SubscriptionOrderByInput']]
    where: 'SubscriptionWhereInput'
    cursor: 'SubscriptionWhereUniqueInput'
    distinct: List['SubscriptionScalarFieldKeys']
    
    

class UserSettingsIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class UserSettingsIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class UserSettingsIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class UserSettingsIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class UserSettingsIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserSettingsArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class UserSettingsArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class UserSettingsArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class UserSettingsArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class UserSettingsArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserSettingsArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive1'


class FindManyUserSettingsArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive2'


class FindManyUserSettingsArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive3'


class FindManyUserSettingsArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    include: 'UserSettingsIncludeFromUserSettingsRecursive4'


class FindManyUserSettingsArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserSettingsOrderByInput', List['UserSettingsOrderByInput']]
    where: 'UserSettingsWhereInput'
    cursor: 'UserSettingsWhereUniqueInput'
    distinct: List['UserSettingsScalarFieldKeys']
    
    

class DocumentIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    owner: Union[bool, 'UserArgsFromSessionRecursive1']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSessionRecursive1']


class DocumentIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    owner: Union[bool, 'UserArgsFromSessionRecursive2']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSessionRecursive2']


class DocumentIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    owner: Union[bool, 'UserArgsFromSessionRecursive3']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSessionRecursive3']


class DocumentIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    owner: Union[bool, 'UserArgsFromSessionRecursive4']
    chat_sessions: Union[bool, 'FindManyChatSessionArgsFromSessionRecursive4']


class DocumentIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class DocumentArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'DocumentIncludeFromDocumentRecursive1'


class DocumentArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'DocumentIncludeFromDocumentRecursive2'


class DocumentArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'DocumentIncludeFromDocumentRecursive3'


class DocumentArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'DocumentIncludeFromDocumentRecursive4'


class DocumentArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyDocumentArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive1'


class FindManyDocumentArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive2'


class FindManyDocumentArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive3'


class FindManyDocumentArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    include: 'DocumentIncludeFromDocumentRecursive4'


class FindManyDocumentArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DocumentOrderByInput', List['DocumentOrderByInput']]
    where: 'DocumentWhereInput'
    cursor: 'DocumentWhereUniqueInput'
    distinct: List['DocumentScalarFieldKeys']
    
    

class ChatSessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    document: Union[bool, 'DocumentArgsFromSessionRecursive1']
    messages: Union[bool, 'FindManyChatMessageArgsFromSessionRecursive1']


class ChatSessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    document: Union[bool, 'DocumentArgsFromSessionRecursive2']
    messages: Union[bool, 'FindManyChatMessageArgsFromSessionRecursive2']


class ChatSessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    document: Union[bool, 'DocumentArgsFromSessionRecursive3']
    messages: Union[bool, 'FindManyChatMessageArgsFromSessionRecursive3']


class ChatSessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    document: Union[bool, 'DocumentArgsFromSessionRecursive4']
    messages: Union[bool, 'FindManyChatMessageArgsFromSessionRecursive4']


class ChatSessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class ChatSessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class ChatSessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class ChatSessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class ChatSessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class ChatSessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyChatSessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive1'


class FindManyChatSessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive2'


class FindManyChatSessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive3'


class FindManyChatSessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    include: 'ChatSessionIncludeFromChatSessionRecursive4'


class FindManyChatSessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatSessionOrderByInput', List['ChatSessionOrderByInput']]
    where: 'ChatSessionWhereInput'
    cursor: 'ChatSessionWhereUniqueInput'
    distinct: List['ChatSessionScalarFieldKeys']
    
    

class ChatMessageIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    session: Union[bool, 'ChatSessionArgsFromSessionRecursive1']


class ChatMessageIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    session: Union[bool, 'ChatSessionArgsFromSessionRecursive2']


class ChatMessageIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    session: Union[bool, 'ChatSessionArgsFromSessionRecursive3']


class ChatMessageIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    session: Union[bool, 'ChatSessionArgsFromSessionRecursive4']


class ChatMessageIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class ChatMessageArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyChatMessageArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class SecurityLogIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SecurityLogIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SecurityLogIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SecurityLogIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SecurityLogIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SecurityLogArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class SecurityLogArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class SecurityLogArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class SecurityLogArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class SecurityLogArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySecurityLogArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive1'


class FindManySecurityLogArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive2'


class FindManySecurityLogArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive3'


class FindManySecurityLogArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    include: 'SecurityLogIncludeFromSecurityLogRecursive4'


class FindManySecurityLogArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityLogOrderByInput', List['SecurityLogOrderByInput']]
    where: 'SecurityLogWhereInput'
    cursor: 'SecurityLogWhereUniqueInput'
    distinct: List['SecurityLogScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class VerificationTokenIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class VerificationTokenIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class VerificationTokenIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class VerificationTokenIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class VerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyVerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class AccountIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class AccountIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class AccountIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class AccountIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class AccountIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool
    created_at: bool
    updated_at: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool
    created_at: bool
    updated_at: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'sessionToken': bool,
        'userId': bool,
        'expires': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'sessionToken': int,
        'userId': int,
        'expires': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
    'created_at',
    'updated_at',
    'user',
]
SessionScalarFieldKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
    'created_at',
    'updated_at',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields