generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
  output   = "../node_modules/.prisma/client"
}

generator db {
  provider = "prisma-client-py"
  output   = "../src/generated/python"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  name            String?
  email           String     @unique
  password        String
  job_title       String?    @map("job_title")
  profile_picture String?    @map("profile_picture")
  status          UserStatus @default(ACTIVE)
  email_verified  Boolean    @default(false) @map("email_verified")
  created_at      DateTime   @default(now()) @map("created_at")
  updated_at      DateTime   @updatedAt @map("updated_at")
  last_login_at   DateTime?  @map("last_login_at")

  // Relationships
  documents           Document[]
  chat_sessions       ChatSession[]       @relation("UserChatSessions")
  security_logs       SecurityLog[]       @relation("UserSecurityLogs")
  accounts            Account[]
  sessions            Session[]
  verification_tokens VerificationToken[] @relation("UserVerificationTokens")

  // One-to-one relationship with Subscription
  subscription Subscription? @relation("UserSubscription")

  // One-to-one relationship with UserSettings
  user_settings UserSettings? @relation("UserUserSettings")

  @@map("users")
}

model Subscription {
  id             String   @id @default(cuid())
  user_id        String   @unique @map("user_id") // Make unique for one-to-one
  tokens_used    Int      @default(0) @map("tokens_used")
  token_limit    Int      @map("token_limit")
  billing_date   DateTime @map("billing_date")
  days_remaining Int      @map("days_remaining")

  // Subscription details
  plan_type  SubscriptionStatus @default(BASIC) @map("plan_type")
  price      Float?             @map("price") // Monthly price
  currency   String             @default("PHP") @map("currency")
  is_active  Boolean            @default(true) @map("is_active")
  auto_renew Boolean            @default(true) @map("auto_renew")

  // Payment information
  payment_method           String? @map("payment_method") // "card", "paypal", etc.
  last_four_digits         String? @map("last_four_digits") // Last 4 digits of card
  payment_provider         String? @map("payment_provider") // "stripe", "paypal", etc.
  external_subscription_id String? @map("external_subscription_id") // Stripe/PayPal subscription ID

  // Timestamps
  created_at   DateTime  @default(now()) @map("created_at")
  updated_at   DateTime  @updatedAt @map("updated_at")
  cancelled_at DateTime? @map("cancelled_at")

  // Relationship back to User
  user User @relation("UserSubscription", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UserSettings {
  id      String @id @default(cuid())
  user_id String @unique @map("user_id") // Make unique for one-to-one

  // AI & Chat Settings
  ai_personality  String? @map("ai_personality") @db.Text
  voice_enabled   Boolean @default(true) @map("voice_enabled")
  preferred_voice String? @map("preferred_voice") // Voice selection for TTS

  // File Management Settings
  auto_rename_files   Boolean          @default(false) @map("auto_rename_files")
  file_naming_format  FileNamingFormat @default(ORIGINAL) @map("file_naming_format")
  file_naming_title   String?          @map("file_naming_title")
  file_client_name    String?          @map("file_client_name")
  file_retention_days Int?             @map("file_retention_days") // null = never delete, 7, 30, 60, 90
  auto_delete_files   Boolean          @default(false) @map("auto_delete_files")
  max_file_size_mb    Int              @default(50) @map("max_file_size_mb")

  // Security Settings
  two_factor_enabled  Boolean @default(false) @map("two_factor_enabled")
  two_factor_secret   String? @map("two_factor_secret")
  login_notifications Boolean @default(true) @map("login_notifications")
  security_alerts     Boolean @default(true) @map("security_alerts")

  // Privacy Settings
  data_sharing_consent Boolean @default(false) @map("data_sharing_consent")
  analytics_consent    Boolean @default(true) @map("analytics_consent")
  marketing_emails     Boolean @default(false) @map("marketing_emails")

  // UI/UX Preferences
  theme       String @default("light") @map("theme") // "light", "dark", "auto"
  language    String @default("en") @map("language")
  timezone    String @default("UTC") @map("timezone")
  date_format String @default("MM/DD/YYYY") @map("date_format")

  // Notification Settings
  email_notifications Boolean @default(true) @map("email_notifications")
  push_notifications  Boolean @default(false) @map("push_notifications")

  // Usage Tracking
  last_settings_update DateTime @default(now()) @map("last_settings_update")

  // Timestamps
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  // Relationship back to User
  user User @relation("UserUserSettings", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Document {
  id                      String         @id @default(cuid())
  file_name               String // S3 key when INDEXED, original name when UPLOADED
  original_file_name      String
  file_path               String // S3 URL when INDEXED, empty when UPLOADED
  s3_key                  String? // S3 object key (only when INDEXED)
  s3_bucket               String? // S3 bucket name (only when INDEXED)
  file_size               Int
  mime_type               String
  status                  DocumentStatus @default(UPLOADED)
  page_count              Int?
  processing_started_at   DateTime? // When RAG processing started
  processing_completed_at DateTime? // When RAG processing completed
  s3_uploaded_at          DateTime? // When uploaded to S3
  owner_id                String
  uploaded_at             DateTime       @default(now())
  updated_at              DateTime       @updatedAt

  // Relations
  owner         User          @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  chat_sessions ChatSession[] @relation("DocumentChatSessions")

  // Indexes for performance
  @@index([owner_id, status])
  @@index([status, updated_at])
  @@map("documents")
}

model ChatSession {
  id          String   @id @default(uuid())
  title       String?
  user_id     String   @map("user_id")
  user        User     @relation("UserChatSessions", fields: [user_id], references: [id], onDelete: Cascade)
  document_id String   @map("document_id")
  document    Document @relation("DocumentChatSessions", fields: [document_id], references: [id], onDelete: Cascade)
  is_saved    Boolean  @default(false) @map("is_saved")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")

  messages ChatMessage[] @relation("SessionMessages")

  @@map("chat_sessions")
}

model ChatMessage {
  id           String      @id @default(uuid())
  session_id   String      @map("session_id")
  session      ChatSession @relation("SessionMessages", fields: [session_id], references: [id], onDelete: Cascade)
  role         MessageRole // USER or ASSISTANT
  content      String      @db.Text
  source_nodes Json?       @map("source_nodes") // Retrieved sources info
  tokens_used  Int?        @map("tokens_used")
  created_at   DateTime    @default(now()) @map("created_at")

  @@map("chat_messages")
}

model SecurityLog {
  id         String         @id @default(uuid())
  user_id    String         @map("user_id")
  user       User           @relation("UserSecurityLogs", fields: [user_id], references: [id], onDelete: Cascade)
  action     SecurityAction
  details    String?
  ip_address String?        @map("ip_address")
  user_agent String?        @map("user_agent")
  created_at DateTime       @default(now()) @map("created_at")

  @@index([user_id, created_at])
  @@map("security_logs")
}

model VerificationToken {
  id         String    @id @default(uuid())
  email      String
  key        String
  token      String    @unique
  user_id    String?   @map("user_id")
  user       User?     @relation("UserVerificationTokens", fields: [user_id], references: [id], onDelete: Cascade)
  type       TokenType @default(EMAIL_VERIFICATION)
  expires_at DateTime  @map("expires_at")
  used       Boolean   @default(false)
  created_at DateTime  @default(now()) @map("created_at")

  @@map("verification_tokens")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id") // Map to snake_case
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts") // Use snake_case table name
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions") // Use snake_case table name
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionStatus {
  BASIC
  STANDARD
  PREMIUM
}

enum DocumentStatus {
  UPLOADED // Initial upload, not processed yet
  PROCESSING // Currently being processed by RAG pipeline
  PROCESSED // RAG processing complete, ready for S3 upload
  INDEXED // Uploaded to S3 and fully ready for use
  FAILED // Processing or upload failed
  TEMPORARY // Session-only document (not saved to account)
}

enum MessageRole {
  USER
  ASSISTANT
}

enum FileNamingFormat {
  ORIGINAL
  ADD_TIMESTAMP
  SEQUENTIAL_NUMBERING
}

enum SecurityAction {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  EMAIL_CHANGE
  PROFILE_UPDATE
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  TWO_FACTOR_LOGIN
  DOCUMENT_UPLOAD
  DOCUMENT_DELETE
  DOCUMENT_DOWNLOAD
  CHAT_SAVE
  CHAT_DELETE
}
